/* The following code was generated by JFlex 1.6.1 */

package scannercompi;
import static scannercompi.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/Users/orlandojose/NetBeansProjects/ScannerCompi/src/scannercompi/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\4\1\20\1\20\1\11\22\0\1\3\1\0\1\12"+
    "\1\21\3\0\1\10\1\22\1\24\1\72\1\6\1\71\1\23\1\7"+
    "\1\17\4\16\4\15\2\2\1\70\1\67\1\66\1\65\1\64\2\0"+
    "\1\41\1\61\1\52\1\53\1\5\1\57\1\51\1\36\1\33\1\1"+
    "\1\56\1\37\1\54\1\43\1\26\1\46\1\1\1\27\1\50\1\34"+
    "\1\42\1\40\1\31\1\25\1\45\1\1\1\63\1\13\1\62\1\0"+
    "\1\1\1\0\1\41\1\14\1\52\1\53\1\5\1\60\1\51\1\36"+
    "\1\33\1\1\1\56\1\37\1\54\1\44\1\26\1\46\1\1\1\30"+
    "\1\50\1\35\1\42\1\40\1\31\1\25\1\45\1\1\12\0\1\20"+
    "\252\0\2\32\115\0\1\47\u1ea8\0\1\20\1\20\u0100\0\1\55\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\2\1\6"+
    "\1\7\2\1\1\2\1\10\1\1\1\11\1\12\1\13"+
    "\4\2\1\1\10\2\1\1\6\2\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\0\2\2"+
    "\1\25\1\0\1\26\3\0\1\27\1\0\3\2\1\4"+
    "\1\30\1\31\1\0\1\32\1\33\1\2\1\34\1\35"+
    "\2\2\1\0\2\2\1\36\1\37\1\36\1\37\1\40"+
    "\12\2\1\0\3\2\3\0\7\2\1\41\1\0\3\2"+
    "\1\0\3\2\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\0\1\2\1\52\1\31\2\0\3\2"+
    "\1\0\1\53\3\2\1\0\1\2\1\0\1\2\1\0"+
    "\1\2\1\54\1\0\1\54\6\2\1\55\1\2\1\56"+
    "\1\2\1\57\2\60\2\2\1\61\2\0\1\61\5\2"+
    "\1\0\2\2\2\62\1\63\1\64\1\0\3\2\1\65"+
    "\1\66\1\0\2\67\1\0\2\2\1\70\1\3\1\71"+
    "\1\72\2\2\1\0\1\2\2\73\1\0\1\2\1\0"+
    "\1\2\1\74\1\75\1\76\3\2\1\0\3\2\1\0"+
    "\1\2\2\0\2\2\1\77\1\0\1\2\1\100\2\101"+
    "\2\2\2\102\1\0\2\2\1\51\1\0\2\103\3\2"+
    "\2\104\2\105\1\0\1\2\1\0\1\2\1\106\1\107"+
    "\2\110\2\2\1\0\1\2\2\0\2\2\2\111\2\2"+
    "\2\112\2\2\1\113\1\114\2\115\1\0\3\2\2\116"+
    "\1\117\1\0\1\117\1\2\1\120\1\2\1\0\1\2"+
    "\1\121\2\122\1\123\1\2\1\0\1\2\1\124\1\0"+
    "\2\2\2\125\2\126\1\127";

  private static int [] zzUnpackAction() {
    int [] result = new int[298];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\73\0\73\0\354\0\u0127"+
    "\0\73\0\u0162\0\u019d\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4"+
    "\0\73\0\u02ff\0\u033a\0\u0375\0\u03b0\0\u03eb\0\u0426\0\u0461"+
    "\0\u049c\0\u04d7\0\u0512\0\u054d\0\u0588\0\u05c3\0\u05fe\0\u0639"+
    "\0\u0674\0\u06af\0\u06ea\0\u0725\0\u0760\0\73\0\73\0\u079b"+
    "\0\73\0\u07d6\0\73\0\u0811\0\73\0\u084c\0\u0887\0\u08c2"+
    "\0\u08fd\0\73\0\u0289\0\73\0\u0938\0\u0973\0\u019d\0\73"+
    "\0\u09ae\0\u09e9\0\u0a24\0\u0a5f\0\u0a9a\0\73\0\u024e\0\u0ad5"+
    "\0\73\0\73\0\u0b10\0\166\0\166\0\u0b4b\0\u0b86\0\u0bc1"+
    "\0\u0bfc\0\u0c37\0\u0c72\0\73\0\u0cad\0\166\0\166\0\u0ce8"+
    "\0\u0d23\0\u0d5e\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85\0\u0ec0"+
    "\0\u0efb\0\u0f36\0\u0f71\0\u0fac\0\u0fe7\0\u1022\0\u105d\0\u1098"+
    "\0\u10d3\0\u110e\0\u1149\0\u1184\0\u11bf\0\u11fa\0\u1235\0\u1270"+
    "\0\u12ab\0\u12e6\0\u1321\0\u135c\0\u1397\0\u13d2\0\u140d\0\u1448"+
    "\0\u1483\0\73\0\73\0\73\0\u14be\0\73\0\73\0\u14f9"+
    "\0\u1534\0\u156f\0\166\0\73\0\u15aa\0\u15e5\0\u1620\0\u165b"+
    "\0\u1696\0\u16d1\0\166\0\u170c\0\u1747\0\u1782\0\u17bd\0\u17f8"+
    "\0\u1833\0\u186e\0\u18a9\0\u18e4\0\73\0\u191f\0\166\0\u195a"+
    "\0\u1995\0\u19d0\0\u1a0b\0\u1a46\0\u1a81\0\166\0\u1abc\0\166"+
    "\0\u1af7\0\166\0\73\0\166\0\u1b32\0\u1b6d\0\73\0\u1ba8"+
    "\0\u1be3\0\166\0\u1c1e\0\u1c59\0\u1c94\0\u1ccf\0\u1d0a\0\u1d45"+
    "\0\u1d80\0\u1dbb\0\73\0\166\0\166\0\u1df6\0\u1e31\0\u1e6c"+
    "\0\u1ea7\0\u1ee2\0\73\0\73\0\u1f1d\0\73\0\166\0\u1f58"+
    "\0\u1f93\0\u1fce\0\166\0\73\0\166\0\166\0\u2009\0\u2044"+
    "\0\u207f\0\u20ba\0\73\0\166\0\u20f5\0\u2130\0\u216b\0\u21a6"+
    "\0\166\0\166\0\166\0\u21e1\0\u221c\0\u2257\0\u2292\0\u22cd"+
    "\0\u2308\0\u2343\0\u237e\0\u23b9\0\u23f4\0\u242f\0\u246a\0\u24a5"+
    "\0\166\0\u24e0\0\u251b\0\166\0\73\0\166\0\u2556\0\u2591"+
    "\0\73\0\166\0\u25cc\0\u2607\0\u2642\0\u267d\0\u267d\0\73"+
    "\0\166\0\u26b8\0\u26f3\0\u272e\0\73\0\166\0\73\0\166"+
    "\0\u2769\0\u27a4\0\u27df\0\u281a\0\166\0\166\0\73\0\166"+
    "\0\u2855\0\u2890\0\u28cb\0\u2906\0\u2941\0\u297c\0\u29b7\0\u29f2"+
    "\0\73\0\166\0\u2a2d\0\u2a68\0\73\0\166\0\u2aa3\0\u2ade"+
    "\0\166\0\166\0\73\0\166\0\u2b19\0\u2b54\0\u2b8f\0\u2bca"+
    "\0\73\0\166\0\73\0\u2c05\0\166\0\u2c40\0\166\0\u2c7b"+
    "\0\u2cb6\0\u2cf1\0\166\0\73\0\166\0\166\0\u2d2c\0\u2d67"+
    "\0\u2da2\0\166\0\u2ddd\0\u2e18\0\u2e53\0\73\0\166\0\73"+
    "\0\166\0\166";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[298];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\5\1\13\1\2\1\14\2\4\1\15\1\0"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\2\24\1\25"+
    "\1\26\1\27\2\30\1\3\1\31\1\32\1\33\1\34"+
    "\2\35\1\3\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\2\1\3\2\45\1\14\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\74\0\2\3"+
    "\2\0\1\3\6\0\3\3\6\0\5\3\1\0\14\3"+
    "\1\0\5\3\1\0\4\3\13\0\1\4\4\0\1\57"+
    "\5\0\2\4\55\0\2\3\2\0\1\3\6\0\3\3"+
    "\6\0\5\3\1\0\4\3\1\60\3\3\2\61\2\3"+
    "\1\0\5\3\1\0\4\3\13\0\1\4\3\0\1\62"+
    "\6\0\2\4\3\0\1\63\42\0\1\64\5\0\4\65"+
    "\1\0\3\65\2\0\1\65\1\66\57\65\4\67\1\0"+
    "\4\67\1\0\1\70\1\71\57\67\1\0\2\3\2\0"+
    "\1\72\6\0\3\3\6\0\1\3\1\73\3\3\1\0"+
    "\12\3\1\74\1\3\1\0\5\3\1\0\4\3\30\0"+
    "\1\75\45\0\1\76\7\0\1\77\12\0\2\77\77\0"+
    "\1\100\51\0\1\4\12\0\2\4\3\0\1\63\1\101"+
    "\41\0\1\102\6\0\2\3\2\0\1\3\6\0\3\3"+
    "\6\0\1\3\1\103\3\3\1\0\14\3\1\0\5\3"+
    "\1\0\4\3\12\0\2\3\2\0\1\3\6\0\3\3"+
    "\6\0\2\3\2\104\1\3\1\0\14\3\1\0\5\3"+
    "\1\0\1\3\2\105\1\3\12\0\2\3\2\0\1\106"+
    "\6\0\3\3\6\0\5\3\1\0\14\3\1\0\5\3"+
    "\1\0\4\3\12\0\2\3\2\0\1\3\6\0\3\3"+
    "\6\0\2\3\2\107\1\3\1\110\1\111\2\3\1\112"+
    "\10\3\1\0\5\3\1\0\4\3\54\0\2\113\12\0"+
    "\2\114\13\0\2\3\2\0\1\3\6\0\3\3\6\0"+
    "\5\3\1\0\10\3\2\115\2\3\1\0\5\3\1\0"+
    "\1\3\2\116\1\3\12\0\2\3\2\0\1\3\6\0"+
    "\3\3\6\0\1\3\1\117\2\120\1\3\1\0\3\3"+
    "\1\121\6\3\1\122\1\3\1\0\5\3\1\0\4\3"+
    "\12\0\2\3\2\0\1\3\6\0\3\3\6\0\1\3"+
    "\1\123\3\3\1\0\6\3\1\124\5\3\1\0\5\3"+
    "\1\0\4\3\12\0\2\3\2\0\1\3\6\0\3\3"+
    "\6\0\5\3\1\0\6\3\1\125\5\3\1\0\5\3"+
    "\1\0\4\3\12\0\2\3\2\0\1\3\6\0\3\3"+
    "\6\0\2\3\2\126\1\3\1\0\10\3\2\127\2\3"+
    "\1\0\5\3\1\0\4\3\12\0\2\3\2\0\1\3"+
    "\6\0\3\3\6\0\5\3\1\0\10\3\2\130\2\3"+
    "\1\0\5\3\1\0\4\3\12\0\2\3\2\0\1\3"+
    "\6\0\3\3\6\0\1\3\1\131\3\3\1\132\1\133"+
    "\13\3\1\0\5\3\1\0\4\3\12\0\2\3\2\0"+
    "\1\3\6\0\3\3\6\0\2\3\2\134\1\3\1\0"+
    "\6\3\1\135\5\3\1\0\5\3\1\0\4\3\16\0"+
    "\1\136\26\0\2\137\1\140\35\0\2\3\2\0\1\141"+
    "\6\0\3\3\6\0\5\3\1\0\1\3\2\142\1\143"+
    "\10\3\1\0\5\3\1\0\4\3\12\0\2\3\2\0"+
    "\1\3\6\0\3\3\6\0\1\3\1\144\3\3\1\0"+
    "\14\3\1\0\5\3\1\0\4\3\12\0\2\3\2\0"+
    "\1\3\6\0\3\3\6\0\1\3\1\145\3\3\1\0"+
    "\3\3\1\146\2\3\1\147\5\3\1\0\5\3\1\0"+
    "\4\3\12\0\2\3\2\0\1\3\6\0\3\3\6\0"+
    "\1\3\1\150\3\3\1\151\1\152\13\3\1\0\5\3"+
    "\1\0\4\3\12\0\2\3\2\0\1\3\6\0\3\3"+
    "\6\0\1\3\1\153\3\3\1\0\14\3\1\0\5\3"+
    "\1\0\4\3\12\0\2\3\2\0\1\3\6\0\3\3"+
    "\6\0\1\3\1\154\3\3\1\155\1\156\5\3\1\157"+
    "\1\160\4\3\1\0\5\3\1\0\4\3\75\0\1\161"+
    "\1\162\71\0\1\163\1\164\1\165\71\0\1\166\72\0"+
    "\1\167\7\0\1\170\12\0\2\170\55\0\2\3\2\0"+
    "\1\3\6\0\3\3\6\0\5\3\1\0\14\3\1\171"+
    "\1\172\4\3\1\0\4\3\12\0\2\3\2\0\1\3"+
    "\6\0\3\3\6\0\5\3\1\0\14\3\1\0\3\3"+
    "\1\173\1\3\1\0\4\3\21\0\1\174\72\0\1\65"+
    "\1\0\3\65\1\175\1\176\11\0\1\65\4\0\1\65"+
    "\6\0\1\65\13\0\1\65\22\0\1\67\1\0\5\67"+
    "\11\0\1\67\4\0\1\67\6\0\1\67\13\0\1\67"+
    "\13\0\2\3\2\0\1\3\6\0\3\3\6\0\5\3"+
    "\1\0\14\3\1\0\1\3\1\177\3\3\1\0\4\3"+
    "\12\0\2\3\2\0\1\3\6\0\3\3\6\0\1\3"+
    "\1\200\3\3\1\0\14\3\1\0\5\3\1\0\4\3"+
    "\12\0\2\3\2\0\1\3\6\0\3\3\6\0\5\3"+
    "\1\0\1\3\2\201\11\3\1\0\5\3\1\0\4\3"+
    "\11\0\4\75\1\0\4\75\1\0\6\75\1\0\52\75"+
    "\2\0\1\202\12\0\2\202\55\0\2\3\2\0\1\3"+
    "\6\0\3\3\6\0\2\3\2\203\1\3\1\0\14\3"+
    "\1\0\5\3\1\0\4\3\12\0\2\3\2\0\1\3"+
    "\6\0\3\3\6\0\5\3\1\0\6\3\1\204\4\3"+
    "\1\205\1\0\2\3\1\206\2\3\1\0\4\3\12\0"+
    "\2\3\2\0\1\3\6\0\3\3\6\0\5\3\1\207"+
    "\1\210\13\3\1\0\5\3\1\0\4\3\45\0\2\211"+
    "\36\0\2\3\2\0\1\3\6\0\3\3\6\0\5\3"+
    "\1\0\1\3\2\212\11\3\1\0\5\3\1\0\4\3"+
    "\12\0\2\3\2\0\1\3\6\0\3\3\6\0\5\3"+
    "\1\213\1\214\13\3\1\0\5\3\1\0\4\3\45\0"+
    "\2\215\1\0\1\216\34\0\2\3\2\0\1\3\6\0"+
    "\3\3\6\0\5\3\1\0\1\3\2\217\1\3\1\220"+
    "\7\3\1\0\5\3\1\0\4\3\12\0\2\3\2\0"+
    "\1\3\6\0\3\3\6\0\5\3\1\0\7\3\1\221"+
    "\4\3\1\0\5\3\1\0\4\3\12\0\2\3\2\0"+
    "\1\222\6\0\3\3\6\0\5\3\1\0\14\3\1\0"+
    "\5\3\1\0\4\3\12\0\2\3\2\0\1\3\6\0"+
    "\3\3\6\0\5\3\1\0\13\3\1\223\1\0\5\3"+
    "\1\0\4\3\12\0\2\3\2\0\1\3\6\0\3\3"+
    "\6\0\5\3\1\0\10\3\2\224\2\3\1\0\5\3"+
    "\1\0\4\3\12\0\2\3\2\0\1\3\6\0\1\225"+
    "\2\3\6\0\5\3\1\0\14\3\1\0\5\3\1\0"+
    "\3\3\1\225\12\0\2\3\2\0\1\3\6\0\3\3"+
    "\6\0\2\3\2\226\1\3\1\0\14\3\1\0\5\3"+
    "\1\0\4\3\12\0\2\3\2\0\1\3\6\0\3\3"+
    "\6\0\2\3\2\227\1\3\1\0\14\3\1\0\5\3"+
    "\1\0\4\3\12\0\2\3\2\0\1\3\6\0\3\3"+
    "\6\0\5\3\1\0\14\3\1\0\3\3\1\230\1\3"+
    "\1\0\4\3\12\0\2\3\2\0\1\3\6\0\3\3"+
    "\6\0\5\3\1\0\1\3\2\231\11\3\1\0\5\3"+
    "\1\0\4\3\12\0\2\3\2\0\1\3\6\0\3\3"+
    "\6\0\5\3\1\0\1\3\2\232\11\3\1\0\5\3"+
    "\1\0\4\3\50\0\1\233\34\0\2\3\2\0\1\3"+
    "\6\0\3\3\6\0\5\3\1\0\4\3\1\234\7\3"+
    "\1\0\5\3\1\0\4\3\12\0\2\3\2\0\1\3"+
    "\6\0\3\3\6\0\1\3\1\235\3\3\1\0\14\3"+
    "\1\0\5\3\1\0\4\3\12\0\2\3\2\0\1\3"+
    "\6\0\3\3\6\0\5\3\1\0\14\3\1\0\2\3"+
    "\1\236\2\3\1\0\4\3\45\0\2\237\64\0\2\240"+
    "\70\0\1\241\45\0\2\3\2\0\1\3\6\0\3\3"+
    "\6\0\5\3\1\0\1\3\2\242\11\3\1\0\5\3"+
    "\1\0\4\3\12\0\2\3\2\0\1\3\6\0\3\3"+
    "\6\0\2\3\2\243\1\3\1\0\14\3\1\0\5\3"+
    "\1\0\4\3\12\0\2\3\2\0\1\3\6\0\3\3"+
    "\6\0\1\3\1\244\3\3\1\0\14\3\1\0\5\3"+
    "\1\0\4\3\12\0\2\3\2\0\1\3\6\0\3\3"+
    "\6\0\5\3\1\0\1\3\2\245\11\3\1\0\5\3"+
    "\1\0\4\3\12\0\2\3\2\0\1\3\6\0\3\3"+
    "\6\0\5\3\1\0\10\3\2\246\2\3\1\0\5\3"+
    "\1\0\4\3\12\0\2\3\2\0\1\3\6\0\3\3"+
    "\6\0\5\3\1\0\6\3\1\247\5\3\1\0\5\3"+
    "\1\0\4\3\12\0\2\3\2\0\1\3\6\0\3\3"+
    "\6\0\5\3\1\0\14\3\1\250\1\251\4\3\1\0"+
    "\4\3\12\0\2\3\2\0\1\3\6\0\3\3\6\0"+
    "\4\3\1\252\1\0\14\3\1\0\5\3\1\0\4\3"+
    "\51\0\1\253\33\0\2\3\2\0\1\3\6\0\3\3"+
    "\6\0\5\3\1\0\5\3\1\254\6\3\1\0\5\3"+
    "\1\0\4\3\12\0\2\3\2\0\1\3\6\0\3\3"+
    "\6\0\5\3\1\0\14\3\1\0\3\3\1\255\1\3"+
    "\1\0\4\3\12\0\2\3\2\0\1\3\6\0\3\3"+
    "\6\0\2\3\2\256\1\3\1\0\14\3\1\0\5\3"+
    "\1\0\4\3\50\0\1\257\34\0\2\3\2\0\1\3"+
    "\6\0\3\3\6\0\5\3\1\0\4\3\1\260\7\3"+
    "\1\0\5\3\1\0\4\3\12\0\2\3\2\0\1\3"+
    "\6\0\3\3\6\0\5\3\1\0\4\3\1\261\7\3"+
    "\1\0\5\3\1\0\4\3\12\0\2\3\2\0\1\3"+
    "\6\0\3\3\6\0\5\3\1\0\10\3\2\262\2\3"+
    "\1\0\5\3\1\0\4\3\76\0\1\263\72\0\1\264"+
    "\7\0\1\170\2\0\1\265\7\0\2\170\61\0\1\266"+
    "\66\0\2\3\2\0\1\267\6\0\3\3\6\0\5\3"+
    "\1\0\14\3\1\0\5\3\1\0\4\3\21\0\1\174"+
    "\4\0\2\65\64\0\1\174\4\0\2\175\55\0\2\3"+
    "\2\0\1\3\6\0\3\3\6\0\5\3\1\270\1\271"+
    "\13\3\1\0\5\3\1\0\4\3\12\0\2\3\2\0"+
    "\1\3\6\0\3\3\6\0\5\3\1\0\4\3\1\272"+
    "\7\3\1\0\5\3\1\0\4\3\12\0\2\3\2\0"+
    "\1\273\6\0\3\3\6\0\5\3\1\0\14\3\1\0"+
    "\5\3\1\0\4\3\13\0\1\202\12\0\2\202\5\0"+
    "\1\274\47\0\2\3\2\0\1\3\6\0\3\3\6\0"+
    "\5\3\1\0\4\3\1\275\7\3\1\0\3\3\1\276"+
    "\1\3\1\0\4\3\12\0\2\3\2\0\1\277\6\0"+
    "\3\3\6\0\5\3\1\0\14\3\1\0\5\3\1\0"+
    "\4\3\12\0\2\3\2\0\1\3\6\0\3\3\6\0"+
    "\1\3\1\300\3\3\1\0\14\3\1\0\5\3\1\0"+
    "\4\3\45\0\2\301\36\0\2\3\2\0\1\3\6\0"+
    "\3\3\6\0\5\3\1\0\1\3\2\302\11\3\1\0"+
    "\5\3\1\0\4\3\47\0\1\303\35\0\2\3\2\0"+
    "\1\3\6\0\3\3\6\0\5\3\1\0\3\3\1\304"+
    "\10\3\1\0\5\3\1\0\4\3\50\0\1\305\34\0"+
    "\2\3\2\0\1\3\6\0\3\3\6\0\5\3\1\0"+
    "\4\3\1\306\7\3\1\0\5\3\1\0\4\3\43\0"+
    "\2\307\40\0\2\3\2\0\1\3\6\0\3\3\6\0"+
    "\5\3\1\307\1\310\13\3\1\0\5\3\1\0\4\3"+
    "\12\0\2\3\2\0\1\311\6\0\3\3\6\0\5\3"+
    "\1\0\14\3\1\0\5\3\1\0\4\3\12\0\2\3"+
    "\2\0\1\3\6\0\3\3\6\0\5\3\1\0\10\3"+
    "\2\312\2\3\1\0\5\3\1\0\4\3\12\0\2\3"+
    "\2\0\1\313\6\0\3\3\6\0\5\3\1\0\14\3"+
    "\1\0\5\3\1\0\4\3\12\0\2\3\2\0\1\3"+
    "\6\0\3\3\6\0\5\3\1\0\14\3\1\0\1\3"+
    "\1\314\3\3\1\0\4\3\12\0\2\3\2\0\1\315"+
    "\6\0\3\3\6\0\5\3\1\0\14\3\1\0\5\3"+
    "\1\0\4\3\12\0\2\3\2\0\1\3\6\0\3\3"+
    "\6\0\5\3\1\0\6\3\1\316\5\3\1\0\5\3"+
    "\1\0\4\3\12\0\2\3\2\0\1\3\6\0\3\3"+
    "\6\0\5\3\1\317\1\320\13\3\1\0\5\3\1\0"+
    "\4\3\12\0\2\3\2\0\1\3\6\0\3\3\6\0"+
    "\5\3\1\0\14\3\1\0\1\3\1\321\1\322\2\3"+
    "\1\0\4\3\12\0\2\3\2\0\1\3\6\0\3\3"+
    "\6\0\5\3\1\0\14\3\1\0\5\3\1\323\1\324"+
    "\3\3\43\0\2\325\66\0\2\326\43\0\2\3\2\0"+
    "\1\3\6\0\3\3\6\0\5\3\1\325\1\327\13\3"+
    "\1\0\5\3\1\0\4\3\12\0\2\3\2\0\1\3"+
    "\6\0\3\3\6\0\2\3\2\330\1\3\1\0\14\3"+
    "\1\0\5\3\1\0\4\3\12\0\2\3\2\0\1\3"+
    "\6\0\3\3\6\0\1\3\1\331\3\3\1\0\14\3"+
    "\1\0\5\3\1\0\4\3\12\0\2\3\2\0\1\3"+
    "\6\0\3\3\6\0\5\3\1\0\14\3\1\332\1\333"+
    "\4\3\1\0\4\3\12\0\2\3\2\0\1\3\6\0"+
    "\3\3\6\0\2\3\2\334\1\3\1\0\14\3\1\0"+
    "\5\3\1\0\4\3\16\0\1\335\66\0\2\3\2\0"+
    "\1\336\6\0\3\3\6\0\5\3\1\0\14\3\1\0"+
    "\5\3\1\0\4\3\12\0\2\3\2\0\1\3\6\0"+
    "\3\3\6\0\5\3\1\0\10\3\2\337\2\3\1\0"+
    "\5\3\1\0\4\3\12\0\2\3\2\0\1\3\6\0"+
    "\3\3\6\0\4\3\1\340\1\0\14\3\1\0\5\3"+
    "\1\0\4\3\16\0\1\341\66\0\2\3\2\0\1\342"+
    "\6\0\3\3\6\0\5\3\1\0\14\3\1\0\5\3"+
    "\1\0\4\3\12\0\2\3\2\0\1\3\6\0\3\3"+
    "\6\0\5\3\1\0\14\3\1\343\1\344\4\3\1\0"+
    "\4\3\12\0\2\3\2\0\1\3\6\0\3\3\6\0"+
    "\5\3\1\0\14\3\1\0\2\3\1\345\2\3\1\0"+
    "\4\3\13\0\1\346\3\0\1\347\6\0\2\346\4\0"+
    "\1\347\112\0\2\350\27\0\2\3\2\0\1\3\6\0"+
    "\3\3\6\0\5\3\1\0\10\3\2\351\2\3\1\0"+
    "\5\3\1\0\4\3\12\0\2\3\2\0\1\352\6\0"+
    "\3\3\6\0\5\3\1\0\14\3\1\0\5\3\1\0"+
    "\4\3\12\0\2\3\2\0\1\3\6\0\3\3\6\0"+
    "\5\3\1\0\6\3\1\353\5\3\1\0\5\3\1\0"+
    "\4\3\12\0\2\3\2\0\1\3\6\0\3\3\6\0"+
    "\2\3\2\354\1\3\1\0\14\3\1\0\5\3\1\0"+
    "\4\3\16\0\1\355\66\0\2\3\2\0\1\356\6\0"+
    "\3\3\6\0\5\3\1\0\14\3\1\0\5\3\1\0"+
    "\4\3\16\0\1\357\66\0\2\3\2\0\1\360\6\0"+
    "\3\3\6\0\5\3\1\0\14\3\1\0\5\3\1\0"+
    "\4\3\54\0\2\361\27\0\2\3\2\0\1\3\6\0"+
    "\3\3\6\0\5\3\1\0\10\3\2\362\2\3\1\0"+
    "\5\3\1\0\4\3\12\0\2\3\2\0\1\3\6\0"+
    "\3\3\6\0\5\3\1\363\1\364\13\3\1\0\5\3"+
    "\1\0\4\3\12\0\2\3\2\0\1\3\6\0\3\3"+
    "\6\0\5\3\1\0\4\3\1\365\7\3\1\0\5\3"+
    "\1\0\4\3\12\0\2\3\2\0\1\3\6\0\3\3"+
    "\6\0\5\3\1\0\12\3\1\366\1\3\1\0\5\3"+
    "\1\0\4\3\50\0\1\367\34\0\2\3\2\0\1\3"+
    "\6\0\3\3\6\0\5\3\1\0\4\3\1\370\7\3"+
    "\1\0\5\3\1\0\4\3\12\0\2\3\2\0\1\3"+
    "\6\0\3\3\6\0\2\3\2\371\1\3\1\0\14\3"+
    "\1\0\5\3\1\0\4\3\12\0\2\3\2\0\1\372"+
    "\6\0\3\3\6\0\5\3\1\0\14\3\1\0\5\3"+
    "\1\0\4\3\16\0\1\373\66\0\2\3\2\0\1\374"+
    "\6\0\3\3\6\0\5\3\1\0\14\3\1\0\5\3"+
    "\1\0\4\3\54\0\2\375\62\0\2\376\36\0\2\3"+
    "\2\0\1\3\6\0\3\3\6\0\5\3\1\0\10\3"+
    "\2\377\2\3\1\0\5\3\1\0\4\3\12\0\2\3"+
    "\2\0\1\3\6\0\3\3\6\0\5\3\1\0\1\3"+
    "\2\u0100\11\3\1\0\5\3\1\0\4\3\45\0\2\u0101"+
    "\36\0\2\3\2\0\1\3\6\0\3\3\6\0\5\3"+
    "\1\0\1\3\2\u0102\11\3\1\0\5\3\1\0\4\3"+
    "\12\0\2\3\2\0\1\3\6\0\3\3\6\0\5\3"+
    "\1\0\1\3\2\u0103\11\3\1\0\5\3\1\0\4\3"+
    "\12\0\2\3\2\0\1\3\6\0\3\3\6\0\5\3"+
    "\1\0\6\3\1\u0104\5\3\1\0\5\3\1\0\4\3"+
    "\16\0\1\u0105\66\0\2\3\2\0\1\u0106\6\0\3\3"+
    "\6\0\5\3\1\0\14\3\1\0\5\3\1\0\4\3"+
    "\12\0\2\3\2\0\1\3\6\0\3\3\6\0\5\3"+
    "\1\0\1\3\2\u0107\11\3\1\0\5\3\1\0\4\3"+
    "\13\0\1\346\12\0\2\346\55\0\2\3\2\0\1\3"+
    "\6\0\3\3\6\0\5\3\1\0\6\3\1\u0108\5\3"+
    "\1\0\5\3\1\0\4\3\12\0\2\3\2\0\1\3"+
    "\6\0\3\3\6\0\5\3\1\0\1\3\2\u0109\11\3"+
    "\1\0\5\3\1\0\4\3\12\0\2\3\2\0\1\3"+
    "\6\0\3\3\6\0\5\3\1\0\14\3\1\0\3\3"+
    "\1\u010a\1\3\1\0\4\3\16\0\1\u010b\66\0\2\3"+
    "\2\0\1\u010c\6\0\3\3\6\0\5\3\1\0\14\3"+
    "\1\0\5\3\1\0\4\3\54\0\2\u010d\27\0\2\3"+
    "\2\0\1\3\6\0\3\3\6\0\5\3\1\0\10\3"+
    "\2\u010e\2\3\1\0\5\3\1\0\4\3\12\0\2\3"+
    "\2\0\1\3\6\0\3\3\6\0\5\3\1\0\6\3"+
    "\1\u010f\5\3\1\0\5\3\1\0\4\3\12\0\2\3"+
    "\2\0\1\3\6\0\3\3\6\0\5\3\1\0\14\3"+
    "\1\0\3\3\1\u0110\1\3\1\0\4\3\64\0\1\u0111"+
    "\20\0\2\3\2\0\1\3\6\0\3\3\6\0\5\3"+
    "\1\0\14\3\1\0\3\3\1\u0112\1\3\1\0\4\3"+
    "\62\0\1\u0113\53\0\2\u0114\40\0\2\3\2\0\1\3"+
    "\6\0\3\3\6\0\5\3\1\0\14\3\1\0\1\3"+
    "\1\u0115\3\3\1\0\4\3\12\0\2\3\2\0\1\3"+
    "\6\0\3\3\6\0\5\3\1\u0114\1\u0116\13\3\1\0"+
    "\5\3\1\0\4\3\12\0\2\3\2\0\1\3\6\0"+
    "\3\3\6\0\1\3\1\u0117\3\3\1\0\14\3\1\0"+
    "\5\3\1\0\4\3\12\0\2\3\2\0\1\3\6\0"+
    "\3\3\6\0\2\3\2\u0118\1\3\1\0\14\3\1\0"+
    "\5\3\1\0\4\3\12\0\2\3\2\0\1\3\6\0"+
    "\3\3\6\0\5\3\1\u0119\1\u011a\13\3\1\0\5\3"+
    "\1\0\4\3\12\0\2\3\2\0\1\3\6\0\3\3"+
    "\6\0\5\3\1\0\10\3\2\u011b\2\3\1\0\5\3"+
    "\1\0\4\3\45\0\2\u011c\36\0\2\3\2\0\1\3"+
    "\6\0\3\3\6\0\5\3\1\0\1\3\2\u011d\11\3"+
    "\1\0\5\3\1\0\4\3\12\0\2\3\2\0\1\3"+
    "\6\0\3\3\6\0\5\3\1\0\14\3\1\0\4\3"+
    "\1\u011e\1\0\4\3\12\0\2\3\2\0\1\3\6\0"+
    "\3\3\6\0\5\3\1\0\7\3\1\u011f\4\3\1\0"+
    "\5\3\1\0\4\3\54\0\2\u0120\27\0\2\3\2\0"+
    "\1\3\6\0\3\3\6\0\5\3\1\0\10\3\2\u0121"+
    "\2\3\1\0\5\3\1\0\4\3\12\0\2\3\2\0"+
    "\1\3\6\0\3\3\6\0\5\3\1\0\14\3\1\0"+
    "\3\3\1\u0122\1\3\1\0\4\3\37\0\1\u0123\45\0"+
    "\2\3\2\0\1\3\6\0\3\3\6\0\1\3\1\u0124"+
    "\3\3\1\0\14\3\1\0\5\3\1\0\4\3\12\0"+
    "\2\3\2\0\1\3\6\0\3\3\6\0\2\3\2\u0125"+
    "\1\3\1\0\14\3\1\0\5\3\1\0\4\3\45\0"+
    "\2\u0126\36\0\2\3\2\0\1\3\6\0\3\3\6\0"+
    "\5\3\1\0\1\3\2\u0127\11\3\1\0\5\3\1\0"+
    "\4\3\54\0\2\u0128\27\0\2\3\2\0\1\3\6\0"+
    "\3\3\6\0\5\3\1\0\10\3\2\u0129\2\3\1\0"+
    "\5\3\1\0\4\3\12\0\2\3\2\0\1\u012a\6\0"+
    "\3\3\6\0\5\3\1\0\14\3\1\0\5\3\1\0"+
    "\4\3\11\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11918];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\2\11\2\1\1\11\7\1\1\11"+
    "\24\1\2\11\1\1\1\11\1\1\1\11\1\1\1\11"+
    "\1\1\1\0\2\1\1\11\1\0\1\11\3\0\1\11"+
    "\1\0\4\1\1\11\1\1\1\0\2\11\5\1\1\0"+
    "\3\1\1\11\15\1\1\0\3\1\3\0\10\1\1\0"+
    "\3\1\1\0\4\1\3\11\1\1\2\11\1\1\1\0"+
    "\2\1\1\11\2\0\3\1\1\0\4\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\11\1\0\14\1\1\11"+
    "\3\1\1\11\2\0\6\1\1\0\2\1\1\11\3\1"+
    "\1\0\3\1\2\11\1\0\1\11\1\1\1\0\3\1"+
    "\1\11\4\1\1\0\1\1\1\11\1\1\1\0\1\1"+
    "\1\0\7\1\1\0\3\1\1\0\1\1\2\0\3\1"+
    "\1\0\2\1\1\11\3\1\1\11\1\1\1\0\3\1"+
    "\1\0\1\11\4\1\1\11\1\1\1\11\1\1\1\0"+
    "\1\1\1\0\3\1\1\11\3\1\1\0\1\1\2\0"+
    "\2\1\1\11\3\1\1\11\5\1\1\11\1\1\1\0"+
    "\3\1\1\11\1\1\1\11\1\0\4\1\1\0\2\1"+
    "\1\11\3\1\1\0\2\1\1\0\2\1\1\11\1\1"+
    "\1\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[298];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 232) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { lexeme=yytext(); return ERROR;
            }
          case 88: break;
          case 2: 
            { lexeme=yytext(); return IDENTIFICADOR;
            }
          case 89: break;
          case 3: 
            { lexeme=yytext(); return LITERAL_ENTERO;
            }
          case 90: break;
          case 4: 
            { /*Ignore*/
            }
          case 91: break;
          case 5: 
            { return CAMBIO_LINEA;
            }
          case 92: break;
          case 6: 
            { lexeme = "+"; return OPERADOR;
            }
          case 93: break;
          case 7: 
            { lexeme = "."; return OPERADOR;
            }
          case 94: break;
          case 8: 
            { lexeme = "/"; return OPERADOR;
            }
          case 95: break;
          case 9: 
            { lexeme = "("; return OPERADOR;
            }
          case 96: break;
          case 10: 
            { lexeme = "-"; return OPERADOR;
            }
          case 97: break;
          case 11: 
            { lexeme = ")"; return OPERADOR;
            }
          case 98: break;
          case 12: 
            { lexeme = "]"; return OPERADOR;
            }
          case 99: break;
          case 13: 
            { lexeme = "["; return OPERADOR;
            }
          case 100: break;
          case 14: 
            { lexeme = ">"; return OPERADOR;
            }
          case 101: break;
          case 15: 
            { lexeme = "="; return OPERADOR;
            }
          case 102: break;
          case 16: 
            { lexeme = "<"; return OPERADOR;
            }
          case 103: break;
          case 17: 
            { lexeme = ";"; return OPERADOR;
            }
          case 104: break;
          case 18: 
            { lexeme = ":"; return OPERADOR;
            }
          case 105: break;
          case 19: 
            { lexeme = ","; return OPERADOR;
            }
          case 106: break;
          case 20: 
            { lexeme = "*"; return OPERADOR;
            }
          case 107: break;
          case 21: 
            { lexeme = "++"; return OPERADOR;
            }
          case 108: break;
          case 22: 
            { lexeme = "+="; return OPERADOR;
            }
          case 109: break;
          case 23: 
            { lexeme=yytext(); return LITERAL_STRING;
            }
          case 110: break;
          case 24: 
            { lexeme = "/="; return OPERADOR;
            }
          case 111: break;
          case 25: 
            { lexeme=yytext(); return LITERAL_CHAR;
            }
          case 112: break;
          case 26: 
            { lexeme = "--"; return OPERADOR;
            }
          case 113: break;
          case 27: 
            { lexeme = "-="; return OPERADOR;
            }
          case 114: break;
          case 28: 
            { lexeme = "OR"; return OPERADOR;
            }
          case 115: break;
          case 29: 
            { lexeme = "OF"; return PALABRAS_RESERVADAS;
            }
          case 116: break;
          case 30: 
            { lexeme = "IN"; return PALABRAS_RESERVADAS;
            }
          case 117: break;
          case 31: 
            { lexeme = "IF"; return PALABRAS_RESERVADAS;
            }
          case 118: break;
          case 32: 
            { lexeme = "TO"; return PALABRAS_RESERVADAS;
            }
          case 119: break;
          case 33: 
            { lexeme = "DO"; return PALABRAS_RESERVADAS;
            }
          case 120: break;
          case 34: 
            { lexeme = ">>"; return OPERADOR;
            }
          case 121: break;
          case 35: 
            { lexeme = ">="; return OPERADOR;
            }
          case 122: break;
          case 36: 
            { lexeme = "<>"; return OPERADOR;
            }
          case 123: break;
          case 37: 
            { lexeme = "<="; return OPERADOR;
            }
          case 124: break;
          case 38: 
            { lexeme = "<<"; return OPERADOR;
            }
          case 125: break;
          case 39: 
            { lexeme = ":="; return OPERADOR;
            }
          case 126: break;
          case 40: 
            { lexeme = "*="; return OPERADOR;
            }
          case 127: break;
          case 41: 
            { lexeme=yytext(); return LITERAL_FLOTANTE;
            }
          case 128: break;
          case 42: 
            { lexeme = "END"; return PALABRAS_RESERVADAS;
            }
          case 129: break;
          case 43: 
            { lexeme = "XOR"; return OPERADOR;
            }
          case 130: break;
          case 44: 
            { lexeme = "INT"; return PALABRAS_RESERVADAS;
            }
          case 131: break;
          case 45: 
            { lexeme = "VAR"; return PALABRAS_RESERVADAS;
            }
          case 132: break;
          case 46: 
            { lexeme = "AND"; return OPERADOR;
            }
          case 133: break;
          case 47: 
            { lexeme = "NOT"; return OPERADOR;
            }
          case 134: break;
          case 48: 
            { lexeme = "NIL"; return PALABRAS_RESERVADAS;
            }
          case 135: break;
          case 49: 
            { lexeme = "SET"; return PALABRAS_RESERVADAS;
            }
          case 136: break;
          case 50: 
            { lexeme = "DIV"; return OPERADOR;
            }
          case 137: break;
          case 51: 
            { lexeme = "MOD"; return OPERADOR;
            }
          case 138: break;
          case 52: 
            { lexeme = "FOR"; return PALABRAS_RESERVADAS;
            }
          case 139: break;
          case 53: 
            { lexeme = ">>="; return OPERADOR;
            }
          case 140: break;
          case 54: 
            { lexeme = "<<="; return OPERADOR;
            }
          case 141: break;
          case 55: 
            { lexeme = "ELSE"; return PALABRAS_RESERVADAS;
            }
          case 142: break;
          case 56: 
            { lexeme = "BYTE"; return PALABRAS_RESERVADAS;
            }
          case 143: break;
          case 57: 
            { lexeme = "REAL"; return PALABRAS_RESERVADAS;
            }
          case 144: break;
          case 58: 
            { lexeme = "READ"; return PALABRAS_RESERVADAS;
            }
          case 145: break;
          case 59: 
            { lexeme = "WITH"; return PALABRAS_RESERVADAS;
            }
          case 146: break;
          case 60: 
            { lexeme = "TRUE"; return PALABRAS_RESERVADAS;
            }
          case 147: break;
          case 61: 
            { lexeme = "THEN"; return PALABRAS_RESERVADAS;
            }
          case 148: break;
          case 62: 
            { lexeme = "TYPE"; return PALABRAS_RESERVADAS;
            }
          case 149: break;
          case 63: 
            { lexeme = "GOTO"; return PALABRAS_RESERVADAS;
            }
          case 150: break;
          case 64: 
            { lexeme = "CHAR"; return PALABRAS_RESERVADAS;
            }
          case 151: break;
          case 65: 
            { lexeme = "CASE"; return PALABRAS_RESERVADAS;
            }
          case 152: break;
          case 66: 
            { lexeme = "FILE"; return PALABRAS_RESERVADAS;
            }
          case 153: break;
          case 67: 
            { lexeme = "BEGIN"; return PALABRAS_RESERVADAS;
            }
          case 154: break;
          case 68: 
            { lexeme = "WRITE"; return PALABRAS_RESERVADAS;
            }
          case 155: break;
          case 69: 
            { lexeme = "WHILE"; return PALABRAS_RESERVADAS;
            }
          case 156: break;
          case 70: 
            { lexeme = "LABEL"; return PALABRAS_RESERVADAS;
            }
          case 157: break;
          case 71: 
            { lexeme = "ARRAY"; return PALABRAS_RESERVADAS;
            }
          case 158: break;
          case 72: 
            { lexeme = "UNTIL"; return PALABRAS_RESERVADAS;
            }
          case 159: break;
          case 73: 
            { lexeme = "CONST"; return PALABRAS_RESERVADAS;
            }
          case 160: break;
          case 74: 
            { lexeme = "FALSE"; return PALABRAS_RESERVADAS;
            }
          case 161: break;
          case 75: 
            { lexeme = "REPEAT"; return PALABRAS_RESERVADAS;
            }
          case 162: break;
          case 76: 
            { lexeme = "RECORD"; return PALABRAS_RESERVADAS;
            }
          case 163: break;
          case 77: 
            { lexeme = "INLINE"; return PALABRAS_RESERVADAS;
            }
          case 164: break;
          case 78: 
            { lexeme = "PACKED"; return PALABRAS_RESERVADAS;
            }
          case 165: break;
          case 79: 
            { lexeme = "STRING"; return PALABRAS_RESERVADAS;
            }
          case 166: break;
          case 80: 
            { lexeme = "DOWNTO"; return PALABRAS_RESERVADAS;
            }
          case 167: break;
          case 81: 
            { lexeme = "BOOLEAN"; return PALABRAS_RESERVADAS;
            }
          case 168: break;
          case 82: 
            { lexeme = "LONGINT"; return PALABRAS_RESERVADAS;
            }
          case 169: break;
          case 83: 
            { lexeme = "PROGRAM"; return PALABRAS_RESERVADAS;
            }
          case 170: break;
          case 84: 
            { lexeme = "FORWARD"; return PALABRAS_RESERVADAS;
            }
          case 171: break;
          case 85: 
            { lexeme = "SHORTINT"; return PALABRAS_RESERVADAS;
            }
          case 172: break;
          case 86: 
            { lexeme = "FUNCTION"; return PALABRAS_RESERVADAS;
            }
          case 173: break;
          case 87: 
            { lexeme = "PROCEDURE"; return PALABRAS_RESERVADAS;
            }
          case 174: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
