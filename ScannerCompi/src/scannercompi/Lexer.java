/* The following code was generated by JFlex 1.6.1 */

package scannercompi;
import static scannercompi.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/Users/orlandojose/NetBeansProjects/ScannerCompi/src/scannercompi/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\4\1\17\1\17\1\4\22\0\1\24\1\23\1\11"+
    "\1\26\3\23\1\10\1\20\1\22\1\21\1\25\1\73\1\6\1\7"+
    "\1\16\4\15\4\14\2\2\1\72\1\71\1\70\1\67\1\66\1\0"+
    "\1\23\1\43\1\63\1\54\1\55\1\5\1\61\1\53\1\40\1\35"+
    "\1\1\1\60\1\41\1\56\1\45\1\30\1\50\1\1\1\31\1\52"+
    "\1\36\1\44\1\42\1\33\1\27\1\47\1\1\1\65\1\12\1\64"+
    "\1\23\1\1\1\23\1\43\1\13\1\54\1\55\1\5\1\62\1\53"+
    "\1\40\1\35\1\1\1\60\1\41\1\56\1\46\1\30\1\50\1\1"+
    "\1\32\1\52\1\37\1\44\1\42\1\33\1\27\1\47\1\1\1\0"+
    "\1\23\1\0\1\23\6\0\1\17\252\0\2\34\115\0\1\51\u1ea8\0"+
    "\1\17\1\17\u0100\0\1\57\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\2\1\5\1\6"+
    "\2\1\1\2\1\7\1\10\1\11\1\12\1\13\1\1"+
    "\4\2\1\1\10\2\1\1\6\2\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\2\2\1\3\1\27\1\0\1\30\1\26\3\0\1\31"+
    "\1\0\3\2\1\4\1\32\2\0\1\33\1\34\1\35"+
    "\1\36\1\2\1\37\1\40\2\2\1\0\2\2\1\41"+
    "\1\42\1\41\1\42\1\43\12\2\1\0\3\2\3\0"+
    "\7\2\1\44\1\0\3\2\1\0\3\2\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\24\1\25\1\53\1\0"+
    "\1\2\1\54\1\0\1\36\2\0\3\2\3\0\1\55"+
    "\3\2\1\0\1\2\1\0\1\2\1\0\1\2\1\56"+
    "\1\0\1\56\6\2\1\57\1\2\1\60\1\2\1\61"+
    "\2\62\2\2\1\63\2\0\1\63\5\2\1\0\2\2"+
    "\2\64\1\65\1\66\1\0\3\2\1\67\1\70\1\25"+
    "\2\71\1\53\1\0\2\2\1\72\1\3\1\4\1\73"+
    "\1\74\2\2\1\0\1\2\2\75\1\0\1\2\1\0"+
    "\1\2\1\76\1\77\1\100\3\2\1\0\3\2\1\0"+
    "\1\2\2\0\2\2\1\101\1\0\1\2\1\102\2\103"+
    "\2\2\2\104\1\0\2\2\1\53\2\0\2\105\3\2"+
    "\2\106\2\107\1\0\1\2\1\0\1\2\1\110\1\111"+
    "\2\112\2\2\1\0\1\2\2\0\2\2\2\113\2\2"+
    "\2\114\1\2\1\53\1\2\1\115\1\116\2\117\1\0"+
    "\3\2\2\120\1\121\1\0\1\121\1\2\1\122\1\2"+
    "\1\0\1\2\1\123\2\124\1\125\1\2\1\0\1\2"+
    "\1\126\1\0\2\2\2\127\2\130\1\131";

  private static int [] zzUnpackAction() {
    int [] result = new int[311];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\74\0\360\0\u012c\0\u0168"+
    "\0\u01a4\0\u01e0\0\u021c\0\u0258\0\u0294\0\u02d0\0\74\0\u030c"+
    "\0\u0348\0\u0384\0\u03c0\0\u03fc\0\u0438\0\u0474\0\u04b0\0\u04ec"+
    "\0\u0528\0\u0564\0\u05a0\0\u05dc\0\u0618\0\u0654\0\u0690\0\u06cc"+
    "\0\u0708\0\u0744\0\u0780\0\u07bc\0\u07f8\0\74\0\74\0\u0834"+
    "\0\74\0\u0870\0\74\0\u08ac\0\74\0\u08e8\0\u0924\0\u0960"+
    "\0\u099c\0\u09d8\0\u0a14\0\74\0\u0a50\0\74\0\u0168\0\u0a8c"+
    "\0\u0ac8\0\u01e0\0\74\0\u0b04\0\u0b40\0\u0b7c\0\u0bb8\0\u0bf4"+
    "\0\74\0\u0c30\0\u0c6c\0\74\0\74\0\74\0\u0348\0\u0ca8"+
    "\0\170\0\170\0\u0ce4\0\u0d20\0\u0d5c\0\u0d98\0\u0dd4\0\u0e10"+
    "\0\74\0\u0e4c\0\170\0\170\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c"+
    "\0\u0f78\0\u0fb4\0\u0ff0\0\u102c\0\u1068\0\u10a4\0\u10e0\0\u111c"+
    "\0\u1158\0\u1194\0\u11d0\0\u120c\0\u1248\0\u1284\0\u12c0\0\u12fc"+
    "\0\u1338\0\u1374\0\u13b0\0\u13ec\0\u1428\0\u1464\0\u14a0\0\u14dc"+
    "\0\u1518\0\u1554\0\u1590\0\u15cc\0\u1608\0\u1644\0\74\0\74"+
    "\0\74\0\u1680\0\74\0\u16bc\0\u16f8\0\u1734\0\u1770\0\u17ac"+
    "\0\170\0\u17e8\0\74\0\u1824\0\u1860\0\u189c\0\u18d8\0\u1914"+
    "\0\u1950\0\u198c\0\u19c8\0\170\0\u1a04\0\u1a40\0\u1a7c\0\u1ab8"+
    "\0\u1af4\0\u1b30\0\u1b6c\0\u1ba8\0\u1be4\0\74\0\u1c20\0\170"+
    "\0\u1c5c\0\u1c98\0\u1cd4\0\u1d10\0\u1d4c\0\u1d88\0\170\0\u1dc4"+
    "\0\170\0\u1e00\0\170\0\74\0\170\0\u1e3c\0\u1e78\0\74"+
    "\0\u1eb4\0\u1ef0\0\170\0\u1f2c\0\u1f68\0\u1fa4\0\u1fe0\0\u201c"+
    "\0\u2058\0\u2094\0\u20d0\0\74\0\170\0\170\0\u210c\0\u2148"+
    "\0\u2184\0\u21c0\0\u21fc\0\74\0\74\0\u2238\0\74\0\170"+
    "\0\u2274\0\u22b0\0\u22ec\0\u2328\0\170\0\74\0\u0c6c\0\170"+
    "\0\170\0\u2364\0\u23a0\0\u23dc\0\u2418\0\74\0\170\0\u2454"+
    "\0\u2490\0\u24cc\0\u2508\0\170\0\170\0\170\0\u2544\0\u2580"+
    "\0\u25bc\0\u25f8\0\u2634\0\u2670\0\u26ac\0\u26e8\0\u2724\0\u2760"+
    "\0\u279c\0\u27d8\0\u2814\0\170\0\u2850\0\u288c\0\170\0\74"+
    "\0\170\0\u28c8\0\u2904\0\74\0\170\0\u2940\0\u297c\0\u29b8"+
    "\0\u29f4\0\u2a30\0\u2a6c\0\74\0\170\0\u2aa8\0\u2ae4\0\u2b20"+
    "\0\74\0\170\0\74\0\170\0\u2b5c\0\u2b98\0\u2bd4\0\u2c10"+
    "\0\170\0\170\0\74\0\170\0\u2c4c\0\u2c88\0\u2cc4\0\u2d00"+
    "\0\u2d3c\0\u2d78\0\u2db4\0\u2df0\0\74\0\170\0\u2e2c\0\u2e68"+
    "\0\74\0\170\0\u2ea4\0\u2a30\0\u2ee0\0\170\0\170\0\74"+
    "\0\170\0\u2f1c\0\u2f58\0\u2f94\0\u2fd0\0\74\0\170\0\74"+
    "\0\u300c\0\170\0\u3048\0\170\0\u3084\0\u30c0\0\u30fc\0\170"+
    "\0\74\0\170\0\170\0\u3138\0\u3174\0\u31b0\0\170\0\u31ec"+
    "\0\u3228\0\u3264\0\74\0\170\0\74\0\170\0\170";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[311];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\2\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\2\1\13\2\4\1\14\1\0\1\15\1\16"+
    "\1\17\1\2\1\5\1\20\1\21\1\22\1\23\2\24"+
    "\1\25\1\26\1\27\2\30\1\3\1\31\1\32\1\33"+
    "\1\34\2\35\1\3\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\2\1\3\2\45\1\13\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\75\0\2\3"+
    "\2\0\1\3\1\0\1\56\3\0\3\3\1\56\2\0"+
    "\1\56\1\0\4\56\5\3\1\0\14\3\1\0\5\3"+
    "\1\0\4\3\2\0\4\56\1\0\1\56\1\0\1\57"+
    "\1\4\2\0\1\57\1\0\1\60\3\0\1\57\2\4"+
    "\11\0\5\57\1\0\14\57\1\0\5\57\1\0\4\57"+
    "\11\0\2\3\2\0\1\3\1\0\1\56\3\0\3\3"+
    "\1\56\2\0\1\56\1\0\4\56\5\3\1\0\4\3"+
    "\1\61\3\3\2\62\2\3\1\0\5\3\1\0\4\3"+
    "\2\0\4\56\1\0\1\56\2\0\1\63\3\0\1\64"+
    "\5\0\2\63\2\0\1\65\46\0\1\66\6\0\1\67"+
    "\11\0\2\67\56\0\4\70\1\0\3\70\1\0\1\70"+
    "\1\71\61\70\11\72\1\73\1\74\61\72\1\0\2\3"+
    "\2\0\1\75\1\0\1\56\3\0\3\3\1\56\2\0"+
    "\1\56\1\0\4\56\1\3\1\76\3\3\1\0\12\3"+
    "\1\77\1\3\1\0\5\3\1\0\4\3\2\0\4\56"+
    "\1\0\1\56\16\0\1\100\50\0\1\101\12\0\1\102"+
    "\12\0\1\103\141\0\1\104\6\0\1\63\11\0\2\63"+
    "\2\0\1\65\4\0\1\105\41\0\1\106\6\0\1\107"+
    "\11\0\2\107\57\0\2\3\2\0\1\3\1\0\1\56"+
    "\3\0\3\3\1\56\2\0\1\56\1\0\4\56\1\3"+
    "\1\110\3\3\1\0\14\3\1\0\5\3\1\0\4\3"+
    "\2\0\4\56\1\0\1\56\1\0\2\3\2\0\1\3"+
    "\1\0\1\56\3\0\3\3\1\56\2\0\1\56\1\0"+
    "\4\56\2\3\2\111\1\3\1\0\14\3\1\0\5\3"+
    "\1\0\1\3\2\112\1\3\2\0\4\56\1\0\1\56"+
    "\1\0\2\3\2\0\1\113\1\0\1\56\3\0\3\3"+
    "\1\56\2\0\1\56\1\0\4\56\5\3\1\0\14\3"+
    "\1\0\5\3\1\0\4\3\2\0\4\56\1\0\1\56"+
    "\1\0\2\3\2\0\1\3\1\0\1\56\3\0\3\3"+
    "\1\56\2\0\1\56\1\0\4\56\2\3\2\114\1\3"+
    "\1\115\1\116\2\3\1\117\10\3\1\0\5\3\1\0"+
    "\4\3\2\0\4\56\1\0\1\56\45\0\2\120\12\0"+
    "\2\121\12\0\2\3\2\0\1\3\1\0\1\56\3\0"+
    "\3\3\1\56\2\0\1\56\1\0\4\56\5\3\1\0"+
    "\10\3\2\122\2\3\1\0\5\3\1\0\1\3\2\123"+
    "\1\3\2\0\4\56\1\0\1\56\1\0\2\3\2\0"+
    "\1\3\1\0\1\56\3\0\3\3\1\56\2\0\1\56"+
    "\1\0\4\56\1\3\1\124\2\125\1\3\1\0\3\3"+
    "\1\126\6\3\1\127\1\3\1\0\5\3\1\0\4\3"+
    "\2\0\4\56\1\0\1\56\1\0\2\3\2\0\1\3"+
    "\1\0\1\56\3\0\3\3\1\56\2\0\1\56\1\0"+
    "\4\56\1\3\1\130\3\3\1\0\6\3\1\131\5\3"+
    "\1\0\5\3\1\0\4\3\2\0\4\56\1\0\1\56"+
    "\1\0\2\3\2\0\1\3\1\0\1\56\3\0\3\3"+
    "\1\56\2\0\1\56\1\0\4\56\5\3\1\0\6\3"+
    "\1\132\5\3\1\0\5\3\1\0\4\3\2\0\4\56"+
    "\1\0\1\56\1\0\2\3\2\0\1\3\1\0\1\56"+
    "\3\0\3\3\1\56\2\0\1\56\1\0\4\56\2\3"+
    "\2\133\1\3\1\0\10\3\2\134\2\3\1\0\5\3"+
    "\1\0\4\3\2\0\4\56\1\0\1\56\1\0\2\3"+
    "\2\0\1\3\1\0\1\56\3\0\3\3\1\56\2\0"+
    "\1\56\1\0\4\56\5\3\1\0\10\3\2\135\2\3"+
    "\1\0\5\3\1\0\4\3\2\0\4\56\1\0\1\56"+
    "\1\0\2\3\2\0\1\3\1\0\1\56\3\0\3\3"+
    "\1\56\2\0\1\56\1\0\4\56\1\3\1\136\3\3"+
    "\1\137\1\140\13\3\1\0\5\3\1\0\4\3\2\0"+
    "\4\56\1\0\1\56\1\0\2\3\2\0\1\3\1\0"+
    "\1\56\3\0\3\3\1\56\2\0\1\56\1\0\4\56"+
    "\2\3\2\141\1\3\1\0\6\3\1\142\5\3\1\0"+
    "\5\3\1\0\4\3\2\0\4\56\1\0\1\56\5\0"+
    "\1\143\30\0\2\144\1\145\34\0\2\3\2\0\1\146"+
    "\1\0\1\56\3\0\3\3\1\56\2\0\1\56\1\0"+
    "\4\56\5\3\1\0\1\3\2\147\1\150\10\3\1\0"+
    "\5\3\1\0\4\3\2\0\4\56\1\0\1\56\1\0"+
    "\2\3\2\0\1\3\1\0\1\56\3\0\3\3\1\56"+
    "\2\0\1\56\1\0\4\56\1\3\1\151\3\3\1\0"+
    "\14\3\1\0\5\3\1\0\4\3\2\0\4\56\1\0"+
    "\1\56\1\0\2\3\2\0\1\3\1\0\1\56\3\0"+
    "\3\3\1\56\2\0\1\56\1\0\4\56\1\3\1\152"+
    "\3\3\1\0\3\3\1\153\2\3\1\154\5\3\1\0"+
    "\5\3\1\0\4\3\2\0\4\56\1\0\1\56\1\0"+
    "\2\3\2\0\1\3\1\0\1\56\3\0\3\3\1\56"+
    "\2\0\1\56\1\0\4\56\1\3\1\155\3\3\1\156"+
    "\1\157\13\3\1\0\5\3\1\0\4\3\2\0\4\56"+
    "\1\0\1\56\1\0\2\3\2\0\1\3\1\0\1\56"+
    "\3\0\3\3\1\56\2\0\1\56\1\0\4\56\1\3"+
    "\1\160\3\3\1\0\14\3\1\0\5\3\1\0\4\3"+
    "\2\0\4\56\1\0\1\56\1\0\2\3\2\0\1\3"+
    "\1\0\1\56\3\0\3\3\1\56\2\0\1\56\1\0"+
    "\4\56\1\3\1\161\3\3\1\162\1\163\5\3\1\164"+
    "\1\165\4\3\1\0\5\3\1\0\4\3\2\0\4\56"+
    "\1\0\1\56\66\0\1\166\1\167\72\0\1\170\1\171"+
    "\1\172\72\0\1\173\5\0\2\174\2\0\1\174\1\0"+
    "\1\56\3\0\3\174\1\56\2\0\1\56\1\0\4\56"+
    "\5\174\1\0\14\174\1\0\5\174\1\0\4\174\2\0"+
    "\4\56\1\0\1\56\1\0\2\57\2\0\1\57\1\0"+
    "\1\175\3\0\3\57\11\0\5\57\1\0\14\57\1\0"+
    "\5\57\1\0\4\57\11\0\1\175\1\176\2\0\1\175"+
    "\5\0\1\175\2\176\11\0\5\175\1\0\14\175\1\0"+
    "\5\175\1\0\4\175\11\0\2\3\2\0\1\3\1\0"+
    "\1\56\3\0\3\3\1\56\2\0\1\56\1\0\4\56"+
    "\5\3\1\0\14\3\1\177\1\200\4\3\1\0\4\3"+
    "\2\0\4\56\1\0\1\56\1\0\2\3\2\0\1\3"+
    "\1\0\1\56\3\0\3\3\1\56\2\0\1\56\1\0"+
    "\4\56\5\3\1\0\14\3\1\0\3\3\1\201\1\3"+
    "\1\0\4\3\2\0\4\56\1\0\1\56\2\0\1\63"+
    "\4\0\1\202\4\0\2\63\64\0\1\102\75\0\1\203"+
    "\73\0\4\70\1\204\1\205\14\0\1\70\4\0\1\70"+
    "\6\0\1\70\13\0\1\70\21\0\6\72\14\0\1\72"+
    "\4\0\1\72\6\0\1\72\13\0\1\72\12\0\2\3"+
    "\2\0\1\3\1\0\1\56\3\0\3\3\1\56\2\0"+
    "\1\56\1\0\4\56\5\3\1\0\14\3\1\0\1\3"+
    "\1\206\3\3\1\0\4\3\2\0\4\56\1\0\1\56"+
    "\1\0\2\3\2\0\1\3\1\0\1\56\3\0\3\3"+
    "\1\56\2\0\1\56\1\0\4\56\1\3\1\207\3\3"+
    "\1\0\14\3\1\0\5\3\1\0\4\3\2\0\4\56"+
    "\1\0\1\56\1\0\2\3\2\0\1\3\1\0\1\56"+
    "\3\0\3\3\1\56\2\0\1\56\1\0\4\56\5\3"+
    "\1\0\1\3\2\210\11\3\1\0\5\3\1\0\4\3"+
    "\2\0\4\56\1\0\1\56\4\100\1\0\12\100\1\0"+
    "\54\100\2\0\1\211\11\0\2\211\56\0\11\103\1\0"+
    "\1\212\6\103\1\213\52\103\1\0\2\3\2\0\1\3"+
    "\1\0\1\56\3\0\3\3\1\56\2\0\1\56\1\0"+
    "\4\56\2\3\2\214\1\3\1\0\14\3\1\0\5\3"+
    "\1\0\4\3\2\0\4\56\1\0\1\56\1\0\2\3"+
    "\2\0\1\3\1\0\1\56\3\0\3\3\1\56\2\0"+
    "\1\56\1\0\4\56\5\3\1\0\6\3\1\215\4\3"+
    "\1\216\1\0\2\3\1\217\2\3\1\0\4\3\2\0"+
    "\4\56\1\0\1\56\1\0\2\3\2\0\1\3\1\0"+
    "\1\56\3\0\3\3\1\56\2\0\1\56\1\0\4\56"+
    "\5\3\1\220\1\221\13\3\1\0\5\3\1\0\4\3"+
    "\2\0\4\56\1\0\1\56\36\0\2\222\35\0\2\3"+
    "\2\0\1\3\1\0\1\56\3\0\3\3\1\56\2\0"+
    "\1\56\1\0\4\56\5\3\1\0\1\3\2\223\11\3"+
    "\1\0\5\3\1\0\4\3\2\0\4\56\1\0\1\56"+
    "\1\0\2\3\2\0\1\3\1\0\1\56\3\0\3\3"+
    "\1\56\2\0\1\56\1\0\4\56\5\3\1\224\1\225"+
    "\13\3\1\0\5\3\1\0\4\3\2\0\4\56\1\0"+
    "\1\56\36\0\2\226\1\0\1\227\33\0\2\3\2\0"+
    "\1\3\1\0\1\56\3\0\3\3\1\56\2\0\1\56"+
    "\1\0\4\56\5\3\1\0\1\3\2\230\1\3\1\231"+
    "\7\3\1\0\5\3\1\0\4\3\2\0\4\56\1\0"+
    "\1\56\1\0\2\3\2\0\1\3\1\0\1\56\3\0"+
    "\3\3\1\56\2\0\1\56\1\0\4\56\5\3\1\0"+
    "\7\3\1\232\4\3\1\0\5\3\1\0\4\3\2\0"+
    "\4\56\1\0\1\56\1\0\2\3\2\0\1\233\1\0"+
    "\1\56\3\0\3\3\1\56\2\0\1\56\1\0\4\56"+
    "\5\3\1\0\14\3\1\0\5\3\1\0\4\3\2\0"+
    "\4\56\1\0\1\56\1\0\2\3\2\0\1\3\1\0"+
    "\1\56\3\0\3\3\1\56\2\0\1\56\1\0\4\56"+
    "\5\3\1\0\13\3\1\234\1\0\5\3\1\0\4\3"+
    "\2\0\4\56\1\0\1\56\1\0\2\3\2\0\1\3"+
    "\1\0\1\56\3\0\3\3\1\56\2\0\1\56\1\0"+
    "\4\56\5\3\1\0\10\3\2\235\2\3\1\0\5\3"+
    "\1\0\4\3\2\0\4\56\1\0\1\56\1\0\2\3"+
    "\2\0\1\3\1\0\1\56\3\0\1\236\2\3\1\56"+
    "\2\0\1\56\1\0\4\56\5\3\1\0\14\3\1\0"+
    "\5\3\1\0\3\3\1\236\2\0\4\56\1\0\1\56"+
    "\1\0\2\3\2\0\1\3\1\0\1\56\3\0\3\3"+
    "\1\56\2\0\1\56\1\0\4\56\2\3\2\237\1\3"+
    "\1\0\14\3\1\0\5\3\1\0\4\3\2\0\4\56"+
    "\1\0\1\56\1\0\2\3\2\0\1\3\1\0\1\56"+
    "\3\0\3\3\1\56\2\0\1\56\1\0\4\56\2\3"+
    "\2\240\1\3\1\0\14\3\1\0\5\3\1\0\4\3"+
    "\2\0\4\56\1\0\1\56\1\0\2\3\2\0\1\3"+
    "\1\0\1\56\3\0\3\3\1\56\2\0\1\56\1\0"+
    "\4\56\5\3\1\0\14\3\1\0\3\3\1\241\1\3"+
    "\1\0\4\3\2\0\4\56\1\0\1\56\1\0\2\3"+
    "\2\0\1\3\1\0\1\56\3\0\3\3\1\56\2\0"+
    "\1\56\1\0\4\56\5\3\1\0\1\3\2\242\11\3"+
    "\1\0\5\3\1\0\4\3\2\0\4\56\1\0\1\56"+
    "\1\0\2\3\2\0\1\3\1\0\1\56\3\0\3\3"+
    "\1\56\2\0\1\56\1\0\4\56\5\3\1\0\1\3"+
    "\2\243\11\3\1\0\5\3\1\0\4\3\2\0\4\56"+
    "\1\0\1\56\41\0\1\244\33\0\2\3\2\0\1\3"+
    "\1\0\1\56\3\0\3\3\1\56\2\0\1\56\1\0"+
    "\4\56\5\3\1\0\4\3\1\245\7\3\1\0\5\3"+
    "\1\0\4\3\2\0\4\56\1\0\1\56\1\0\2\3"+
    "\2\0\1\3\1\0\1\56\3\0\3\3\1\56\2\0"+
    "\1\56\1\0\4\56\1\3\1\246\3\3\1\0\14\3"+
    "\1\0\5\3\1\0\4\3\2\0\4\56\1\0\1\56"+
    "\1\0\2\3\2\0\1\3\1\0\1\56\3\0\3\3"+
    "\1\56\2\0\1\56\1\0\4\56\5\3\1\0\14\3"+
    "\1\0\2\3\1\247\2\3\1\0\4\3\2\0\4\56"+
    "\1\0\1\56\36\0\2\250\65\0\2\251\71\0\1\252"+
    "\44\0\2\3\2\0\1\3\1\0\1\56\3\0\3\3"+
    "\1\56\2\0\1\56\1\0\4\56\5\3\1\0\1\3"+
    "\2\253\11\3\1\0\5\3\1\0\4\3\2\0\4\56"+
    "\1\0\1\56\1\0\2\3\2\0\1\3\1\0\1\56"+
    "\3\0\3\3\1\56\2\0\1\56\1\0\4\56\2\3"+
    "\2\254\1\3\1\0\14\3\1\0\5\3\1\0\4\3"+
    "\2\0\4\56\1\0\1\56\1\0\2\3\2\0\1\3"+
    "\1\0\1\56\3\0\3\3\1\56\2\0\1\56\1\0"+
    "\4\56\1\3\1\255\3\3\1\0\14\3\1\0\5\3"+
    "\1\0\4\3\2\0\4\56\1\0\1\56\1\0\2\3"+
    "\2\0\1\3\1\0\1\56\3\0\3\3\1\56\2\0"+
    "\1\56\1\0\4\56\5\3\1\0\1\3\2\256\11\3"+
    "\1\0\5\3\1\0\4\3\2\0\4\56\1\0\1\56"+
    "\1\0\2\3\2\0\1\3\1\0\1\56\3\0\3\3"+
    "\1\56\2\0\1\56\1\0\4\56\5\3\1\0\10\3"+
    "\2\257\2\3\1\0\5\3\1\0\4\3\2\0\4\56"+
    "\1\0\1\56\1\0\2\3\2\0\1\3\1\0\1\56"+
    "\3\0\3\3\1\56\2\0\1\56\1\0\4\56\5\3"+
    "\1\0\6\3\1\260\5\3\1\0\5\3\1\0\4\3"+
    "\2\0\4\56\1\0\1\56\1\0\2\3\2\0\1\3"+
    "\1\0\1\56\3\0\3\3\1\56\2\0\1\56\1\0"+
    "\4\56\5\3\1\0\14\3\1\261\1\262\4\3\1\0"+
    "\4\3\2\0\4\56\1\0\1\56\1\0\2\3\2\0"+
    "\1\3\1\0\1\56\3\0\3\3\1\56\2\0\1\56"+
    "\1\0\4\56\4\3\1\263\1\0\14\3\1\0\5\3"+
    "\1\0\4\3\2\0\4\56\1\0\1\56\42\0\1\264"+
    "\32\0\2\3\2\0\1\3\1\0\1\56\3\0\3\3"+
    "\1\56\2\0\1\56\1\0\4\56\5\3\1\0\5\3"+
    "\1\265\6\3\1\0\5\3\1\0\4\3\2\0\4\56"+
    "\1\0\1\56\1\0\2\3\2\0\1\3\1\0\1\56"+
    "\3\0\3\3\1\56\2\0\1\56\1\0\4\56\5\3"+
    "\1\0\14\3\1\0\3\3\1\266\1\3\1\0\4\3"+
    "\2\0\4\56\1\0\1\56\1\0\2\3\2\0\1\3"+
    "\1\0\1\56\3\0\3\3\1\56\2\0\1\56\1\0"+
    "\4\56\2\3\2\267\1\3\1\0\14\3\1\0\5\3"+
    "\1\0\4\3\2\0\4\56\1\0\1\56\41\0\1\270"+
    "\33\0\2\3\2\0\1\3\1\0\1\56\3\0\3\3"+
    "\1\56\2\0\1\56\1\0\4\56\5\3\1\0\4\3"+
    "\1\271\7\3\1\0\5\3\1\0\4\3\2\0\4\56"+
    "\1\0\1\56\1\0\2\3\2\0\1\3\1\0\1\56"+
    "\3\0\3\3\1\56\2\0\1\56\1\0\4\56\5\3"+
    "\1\0\4\3\1\272\7\3\1\0\5\3\1\0\4\3"+
    "\2\0\4\56\1\0\1\56\1\0\2\3\2\0\1\3"+
    "\1\0\1\56\3\0\3\3\1\56\2\0\1\56\1\0"+
    "\4\56\5\3\1\0\10\3\2\273\2\3\1\0\5\3"+
    "\1\0\4\3\2\0\4\56\1\0\1\56\67\0\1\274"+
    "\73\0\1\275\5\0\2\174\2\0\1\174\5\0\3\174"+
    "\11\0\5\174\1\0\14\174\1\0\5\174\1\0\4\174"+
    "\11\0\2\175\2\0\1\175\5\0\3\175\11\0\5\175"+
    "\1\0\14\175\1\0\5\175\1\0\4\175\11\0\1\175"+
    "\1\176\2\0\1\276\5\0\1\175\2\176\11\0\5\175"+
    "\1\0\14\175\1\0\5\175\1\0\4\175\15\0\1\277"+
    "\67\0\2\3\2\0\1\300\1\0\1\56\3\0\3\3"+
    "\1\56\2\0\1\56\1\0\4\56\5\3\1\0\14\3"+
    "\1\0\5\3\1\0\4\3\2\0\4\56\1\0\1\56"+
    "\2\0\1\301\11\0\2\301\66\0\1\203\3\0\2\70"+
    "\66\0\1\203\3\0\2\204\57\0\2\3\2\0\1\3"+
    "\1\0\1\56\3\0\3\3\1\56\2\0\1\56\1\0"+
    "\4\56\5\3\1\302\1\303\13\3\1\0\5\3\1\0"+
    "\4\3\2\0\4\56\1\0\1\56\1\0\2\3\2\0"+
    "\1\3\1\0\1\56\3\0\3\3\1\56\2\0\1\56"+
    "\1\0\4\56\5\3\1\0\4\3\1\304\7\3\1\0"+
    "\5\3\1\0\4\3\2\0\4\56\1\0\1\56\1\0"+
    "\2\3\2\0\1\305\1\0\1\56\3\0\3\3\1\56"+
    "\2\0\1\56\1\0\4\56\5\3\1\0\14\3\1\0"+
    "\5\3\1\0\4\3\2\0\4\56\1\0\1\56\2\0"+
    "\1\211\11\0\2\211\4\0\1\306\61\0\6\103\14\0"+
    "\1\103\4\0\1\103\6\0\1\103\13\0\1\103\11\0"+
    "\11\103\1\0\1\212\6\103\1\213\1\307\51\103\1\0"+
    "\2\3\2\0\1\3\1\0\1\56\3\0\3\3\1\56"+
    "\2\0\1\56\1\0\4\56\5\3\1\0\4\3\1\310"+
    "\7\3\1\0\3\3\1\311\1\3\1\0\4\3\2\0"+
    "\4\56\1\0\1\56\1\0\2\3\2\0\1\312\1\0"+
    "\1\56\3\0\3\3\1\56\2\0\1\56\1\0\4\56"+
    "\5\3\1\0\14\3\1\0\5\3\1\0\4\3\2\0"+
    "\4\56\1\0\1\56\1\0\2\3\2\0\1\3\1\0"+
    "\1\56\3\0\3\3\1\56\2\0\1\56\1\0\4\56"+
    "\1\3\1\313\3\3\1\0\14\3\1\0\5\3\1\0"+
    "\4\3\2\0\4\56\1\0\1\56\36\0\2\314\35\0"+
    "\2\3\2\0\1\3\1\0\1\56\3\0\3\3\1\56"+
    "\2\0\1\56\1\0\4\56\5\3\1\0\1\3\2\315"+
    "\11\3\1\0\5\3\1\0\4\3\2\0\4\56\1\0"+
    "\1\56\40\0\1\316\34\0\2\3\2\0\1\3\1\0"+
    "\1\56\3\0\3\3\1\56\2\0\1\56\1\0\4\56"+
    "\5\3\1\0\3\3\1\317\10\3\1\0\5\3\1\0"+
    "\4\3\2\0\4\56\1\0\1\56\41\0\1\320\33\0"+
    "\2\3\2\0\1\3\1\0\1\56\3\0\3\3\1\56"+
    "\2\0\1\56\1\0\4\56\5\3\1\0\4\3\1\321"+
    "\7\3\1\0\5\3\1\0\4\3\2\0\4\56\1\0"+
    "\1\56\34\0\2\322\37\0\2\3\2\0\1\3\1\0"+
    "\1\56\3\0\3\3\1\56\2\0\1\56\1\0\4\56"+
    "\5\3\1\322\1\323\13\3\1\0\5\3\1\0\4\3"+
    "\2\0\4\56\1\0\1\56\1\0\2\3\2\0\1\324"+
    "\1\0\1\56\3\0\3\3\1\56\2\0\1\56\1\0"+
    "\4\56\5\3\1\0\14\3\1\0\5\3\1\0\4\3"+
    "\2\0\4\56\1\0\1\56\1\0\2\3\2\0\1\3"+
    "\1\0\1\56\3\0\3\3\1\56\2\0\1\56\1\0"+
    "\4\56\5\3\1\0\10\3\2\325\2\3\1\0\5\3"+
    "\1\0\4\3\2\0\4\56\1\0\1\56\1\0\2\3"+
    "\2\0\1\326\1\0\1\56\3\0\3\3\1\56\2\0"+
    "\1\56\1\0\4\56\5\3\1\0\14\3\1\0\5\3"+
    "\1\0\4\3\2\0\4\56\1\0\1\56\1\0\2\3"+
    "\2\0\1\3\1\0\1\56\3\0\3\3\1\56\2\0"+
    "\1\56\1\0\4\56\5\3\1\0\14\3\1\0\1\3"+
    "\1\327\3\3\1\0\4\3\2\0\4\56\1\0\1\56"+
    "\1\0\2\3\2\0\1\330\1\0\1\56\3\0\3\3"+
    "\1\56\2\0\1\56\1\0\4\56\5\3\1\0\14\3"+
    "\1\0\5\3\1\0\4\3\2\0\4\56\1\0\1\56"+
    "\1\0\2\3\2\0\1\3\1\0\1\56\3\0\3\3"+
    "\1\56\2\0\1\56\1\0\4\56\5\3\1\0\6\3"+
    "\1\331\5\3\1\0\5\3\1\0\4\3\2\0\4\56"+
    "\1\0\1\56\1\0\2\3\2\0\1\3\1\0\1\56"+
    "\3\0\3\3\1\56\2\0\1\56\1\0\4\56\5\3"+
    "\1\332\1\333\13\3\1\0\5\3\1\0\4\3\2\0"+
    "\4\56\1\0\1\56\1\0\2\3\2\0\1\3\1\0"+
    "\1\56\3\0\3\3\1\56\2\0\1\56\1\0\4\56"+
    "\5\3\1\0\14\3\1\0\1\3\1\334\1\335\2\3"+
    "\1\0\4\3\2\0\4\56\1\0\1\56\1\0\2\3"+
    "\2\0\1\3\1\0\1\56\3\0\3\3\1\56\2\0"+
    "\1\56\1\0\4\56\5\3\1\0\14\3\1\0\5\3"+
    "\1\336\1\337\3\3\2\0\4\56\1\0\1\56\34\0"+
    "\2\340\67\0\2\341\42\0\2\3\2\0\1\3\1\0"+
    "\1\56\3\0\3\3\1\56\2\0\1\56\1\0\4\56"+
    "\5\3\1\340\1\342\13\3\1\0\5\3\1\0\4\3"+
    "\2\0\4\56\1\0\1\56\1\0\2\3\2\0\1\3"+
    "\1\0\1\56\3\0\3\3\1\56\2\0\1\56\1\0"+
    "\4\56\2\3\2\343\1\3\1\0\14\3\1\0\5\3"+
    "\1\0\4\3\2\0\4\56\1\0\1\56\1\0\2\3"+
    "\2\0\1\3\1\0\1\56\3\0\3\3\1\56\2\0"+
    "\1\56\1\0\4\56\1\3\1\344\3\3\1\0\14\3"+
    "\1\0\5\3\1\0\4\3\2\0\4\56\1\0\1\56"+
    "\1\0\2\3\2\0\1\3\1\0\1\56\3\0\3\3"+
    "\1\56\2\0\1\56\1\0\4\56\5\3\1\0\14\3"+
    "\1\345\1\346\4\3\1\0\4\3\2\0\4\56\1\0"+
    "\1\56\1\0\2\3\2\0\1\3\1\0\1\56\3\0"+
    "\3\3\1\56\2\0\1\56\1\0\4\56\2\3\2\347"+
    "\1\3\1\0\14\3\1\0\5\3\1\0\4\3\2\0"+
    "\4\56\1\0\1\56\5\0\1\350\67\0\2\3\2\0"+
    "\1\351\1\0\1\56\3\0\3\3\1\56\2\0\1\56"+
    "\1\0\4\56\5\3\1\0\14\3\1\0\5\3\1\0"+
    "\4\3\2\0\4\56\1\0\1\56\1\0\2\3\2\0"+
    "\1\3\1\0\1\56\3\0\3\3\1\56\2\0\1\56"+
    "\1\0\4\56\5\3\1\0\10\3\2\352\2\3\1\0"+
    "\5\3\1\0\4\3\2\0\4\56\1\0\1\56\1\0"+
    "\2\3\2\0\1\3\1\0\1\56\3\0\3\3\1\56"+
    "\2\0\1\56\1\0\4\56\4\3\1\353\1\0\14\3"+
    "\1\0\5\3\1\0\4\3\2\0\4\56\1\0\1\56"+
    "\5\0\1\354\67\0\2\3\2\0\1\355\1\0\1\56"+
    "\3\0\3\3\1\56\2\0\1\56\1\0\4\56\5\3"+
    "\1\0\14\3\1\0\5\3\1\0\4\3\2\0\4\56"+
    "\1\0\1\56\1\0\2\3\2\0\1\3\1\0\1\56"+
    "\3\0\3\3\1\56\2\0\1\56\1\0\4\56\5\3"+
    "\1\0\14\3\1\356\1\357\4\3\1\0\4\3\2\0"+
    "\4\56\1\0\1\56\1\0\2\3\2\0\1\3\1\0"+
    "\1\56\3\0\3\3\1\56\2\0\1\56\1\0\4\56"+
    "\5\3\1\0\14\3\1\0\2\3\1\360\2\3\1\0"+
    "\4\3\2\0\4\56\1\0\1\56\1\0\1\175\1\361"+
    "\2\0\1\175\1\362\4\0\1\175\2\361\7\0\1\362"+
    "\1\0\5\175\1\0\14\175\1\0\5\175\1\0\4\175"+
    "\12\0\1\301\2\0\1\363\6\0\2\301\123\0\2\364"+
    "\26\0\2\3\2\0\1\3\1\0\1\56\3\0\3\3"+
    "\1\56\2\0\1\56\1\0\4\56\5\3\1\0\10\3"+
    "\2\365\2\3\1\0\5\3\1\0\4\3\2\0\4\56"+
    "\1\0\1\56\1\0\2\3\2\0\1\366\1\0\1\56"+
    "\3\0\3\3\1\56\2\0\1\56\1\0\4\56\5\3"+
    "\1\0\14\3\1\0\5\3\1\0\4\3\2\0\4\56"+
    "\1\0\1\56\1\0\2\3\2\0\1\3\1\0\1\56"+
    "\3\0\3\3\1\56\2\0\1\56\1\0\4\56\5\3"+
    "\1\0\6\3\1\367\5\3\1\0\5\3\1\0\4\3"+
    "\2\0\4\56\1\0\1\56\1\0\2\3\2\0\1\3"+
    "\1\0\1\56\3\0\3\3\1\56\2\0\1\56\1\0"+
    "\4\56\2\3\2\370\1\3\1\0\14\3\1\0\5\3"+
    "\1\0\4\3\2\0\4\56\1\0\1\56\5\0\1\371"+
    "\67\0\2\3\2\0\1\372\1\0\1\56\3\0\3\3"+
    "\1\56\2\0\1\56\1\0\4\56\5\3\1\0\14\3"+
    "\1\0\5\3\1\0\4\3\2\0\4\56\1\0\1\56"+
    "\5\0\1\373\67\0\2\3\2\0\1\374\1\0\1\56"+
    "\3\0\3\3\1\56\2\0\1\56\1\0\4\56\5\3"+
    "\1\0\14\3\1\0\5\3\1\0\4\3\2\0\4\56"+
    "\1\0\1\56\45\0\2\375\26\0\2\3\2\0\1\3"+
    "\1\0\1\56\3\0\3\3\1\56\2\0\1\56\1\0"+
    "\4\56\5\3\1\0\10\3\2\376\2\3\1\0\5\3"+
    "\1\0\4\3\2\0\4\56\1\0\1\56\1\0\2\3"+
    "\2\0\1\3\1\0\1\56\3\0\3\3\1\56\2\0"+
    "\1\56\1\0\4\56\5\3\1\377\1\u0100\13\3\1\0"+
    "\5\3\1\0\4\3\2\0\4\56\1\0\1\56\1\0"+
    "\2\3\2\0\1\3\1\0\1\56\3\0\3\3\1\56"+
    "\2\0\1\56\1\0\4\56\5\3\1\0\4\3\1\u0101"+
    "\7\3\1\0\5\3\1\0\4\3\2\0\4\56\1\0"+
    "\1\56\1\0\2\3\2\0\1\3\1\0\1\56\3\0"+
    "\3\3\1\56\2\0\1\56\1\0\4\56\5\3\1\0"+
    "\12\3\1\u0102\1\3\1\0\5\3\1\0\4\3\2\0"+
    "\4\56\1\0\1\56\41\0\1\u0103\33\0\2\3\2\0"+
    "\1\3\1\0\1\56\3\0\3\3\1\56\2\0\1\56"+
    "\1\0\4\56\5\3\1\0\4\3\1\u0104\7\3\1\0"+
    "\5\3\1\0\4\3\2\0\4\56\1\0\1\56\1\0"+
    "\2\3\2\0\1\3\1\0\1\56\3\0\3\3\1\56"+
    "\2\0\1\56\1\0\4\56\2\3\2\u0105\1\3\1\0"+
    "\14\3\1\0\5\3\1\0\4\3\2\0\4\56\1\0"+
    "\1\56\1\0\2\3\2\0\1\u0106\1\0\1\56\3\0"+
    "\3\3\1\56\2\0\1\56\1\0\4\56\5\3\1\0"+
    "\14\3\1\0\5\3\1\0\4\3\2\0\4\56\1\0"+
    "\1\56\5\0\1\u0107\67\0\2\3\2\0\1\u0108\1\0"+
    "\1\56\3\0\3\3\1\56\2\0\1\56\1\0\4\56"+
    "\5\3\1\0\14\3\1\0\5\3\1\0\4\3\2\0"+
    "\4\56\1\0\1\56\45\0\2\u0109\63\0\2\u010a\35\0"+
    "\2\3\2\0\1\3\1\0\1\56\3\0\3\3\1\56"+
    "\2\0\1\56\1\0\4\56\5\3\1\0\10\3\2\u010b"+
    "\2\3\1\0\5\3\1\0\4\3\2\0\4\56\1\0"+
    "\1\56\1\0\2\3\2\0\1\3\1\0\1\56\3\0"+
    "\3\3\1\56\2\0\1\56\1\0\4\56\5\3\1\0"+
    "\1\3\2\u010c\11\3\1\0\5\3\1\0\4\3\2\0"+
    "\4\56\1\0\1\56\36\0\2\u010d\35\0\2\3\2\0"+
    "\1\3\1\0\1\56\3\0\3\3\1\56\2\0\1\56"+
    "\1\0\4\56\5\3\1\0\1\3\2\u010e\11\3\1\0"+
    "\5\3\1\0\4\3\2\0\4\56\1\0\1\56\1\0"+
    "\2\3\2\0\1\3\1\0\1\56\3\0\3\3\1\56"+
    "\2\0\1\56\1\0\4\56\5\3\1\0\1\3\2\u010f"+
    "\11\3\1\0\5\3\1\0\4\3\2\0\4\56\1\0"+
    "\1\56\1\0\2\3\2\0\1\3\1\0\1\56\3\0"+
    "\3\3\1\56\2\0\1\56\1\0\4\56\5\3\1\0"+
    "\6\3\1\u0110\5\3\1\0\5\3\1\0\4\3\2\0"+
    "\4\56\1\0\1\56\5\0\1\u0111\67\0\2\3\2\0"+
    "\1\u0112\1\0\1\56\3\0\3\3\1\56\2\0\1\56"+
    "\1\0\4\56\5\3\1\0\14\3\1\0\5\3\1\0"+
    "\4\3\2\0\4\56\1\0\1\56\1\0\2\3\2\0"+
    "\1\3\1\0\1\56\3\0\3\3\1\56\2\0\1\56"+
    "\1\0\4\56\5\3\1\0\1\3\2\u0113\11\3\1\0"+
    "\5\3\1\0\4\3\2\0\4\56\1\0\1\56\1\0"+
    "\1\175\1\361\2\0\1\175\5\0\1\175\2\361\11\0"+
    "\5\175\1\0\14\175\1\0\5\175\1\0\4\175\12\0"+
    "\1\u0114\11\0\2\u0114\60\0\1\u0114\3\0\1\362\5\0"+
    "\2\u0114\7\0\1\362\47\0\2\3\2\0\1\3\1\0"+
    "\1\56\3\0\3\3\1\56\2\0\1\56\1\0\4\56"+
    "\5\3\1\0\6\3\1\u0115\5\3\1\0\5\3\1\0"+
    "\4\3\2\0\4\56\1\0\1\56\1\0\2\3\2\0"+
    "\1\3\1\0\1\56\3\0\3\3\1\56\2\0\1\56"+
    "\1\0\4\56\5\3\1\0\1\3\2\u0116\11\3\1\0"+
    "\5\3\1\0\4\3\2\0\4\56\1\0\1\56\1\0"+
    "\2\3\2\0\1\3\1\0\1\56\3\0\3\3\1\56"+
    "\2\0\1\56\1\0\4\56\5\3\1\0\14\3\1\0"+
    "\3\3\1\u0117\1\3\1\0\4\3\2\0\4\56\1\0"+
    "\1\56\5\0\1\u0118\67\0\2\3\2\0\1\u0119\1\0"+
    "\1\56\3\0\3\3\1\56\2\0\1\56\1\0\4\56"+
    "\5\3\1\0\14\3\1\0\5\3\1\0\4\3\2\0"+
    "\4\56\1\0\1\56\45\0\2\u011a\26\0\2\3\2\0"+
    "\1\3\1\0\1\56\3\0\3\3\1\56\2\0\1\56"+
    "\1\0\4\56\5\3\1\0\10\3\2\u011b\2\3\1\0"+
    "\5\3\1\0\4\3\2\0\4\56\1\0\1\56\1\0"+
    "\2\3\2\0\1\3\1\0\1\56\3\0\3\3\1\56"+
    "\2\0\1\56\1\0\4\56\5\3\1\0\6\3\1\u011c"+
    "\5\3\1\0\5\3\1\0\4\3\2\0\4\56\1\0"+
    "\1\56\1\0\2\3\2\0\1\3\1\0\1\56\3\0"+
    "\3\3\1\56\2\0\1\56\1\0\4\56\5\3\1\0"+
    "\14\3\1\0\3\3\1\u011d\1\3\1\0\4\3\2\0"+
    "\4\56\1\0\1\56\55\0\1\u011e\17\0\2\3\2\0"+
    "\1\3\1\0\1\56\3\0\3\3\1\56\2\0\1\56"+
    "\1\0\4\56\5\3\1\0\14\3\1\0\3\3\1\u011f"+
    "\1\3\1\0\4\3\2\0\4\56\1\0\1\56\53\0"+
    "\1\u0120\54\0\2\u0121\37\0\2\3\2\0\1\3\1\0"+
    "\1\56\3\0\3\3\1\56\2\0\1\56\1\0\4\56"+
    "\5\3\1\0\14\3\1\0\1\3\1\u0122\3\3\1\0"+
    "\4\3\2\0\4\56\1\0\1\56\1\0\2\3\2\0"+
    "\1\3\1\0\1\56\3\0\3\3\1\56\2\0\1\56"+
    "\1\0\4\56\5\3\1\u0121\1\u0123\13\3\1\0\5\3"+
    "\1\0\4\3\2\0\4\56\1\0\1\56\1\0\2\3"+
    "\2\0\1\3\1\0\1\56\3\0\3\3\1\56\2\0"+
    "\1\56\1\0\4\56\1\3\1\u0124\3\3\1\0\14\3"+
    "\1\0\5\3\1\0\4\3\2\0\4\56\1\0\1\56"+
    "\1\0\2\3\2\0\1\3\1\0\1\56\3\0\3\3"+
    "\1\56\2\0\1\56\1\0\4\56\2\3\2\u0125\1\3"+
    "\1\0\14\3\1\0\5\3\1\0\4\3\2\0\4\56"+
    "\1\0\1\56\1\0\2\3\2\0\1\3\1\0\1\56"+
    "\3\0\3\3\1\56\2\0\1\56\1\0\4\56\5\3"+
    "\1\u0126\1\u0127\13\3\1\0\5\3\1\0\4\3\2\0"+
    "\4\56\1\0\1\56\1\0\2\3\2\0\1\3\1\0"+
    "\1\56\3\0\3\3\1\56\2\0\1\56\1\0\4\56"+
    "\5\3\1\0\10\3\2\u0128\2\3\1\0\5\3\1\0"+
    "\4\3\2\0\4\56\1\0\1\56\36\0\2\u0129\35\0"+
    "\2\3\2\0\1\3\1\0\1\56\3\0\3\3\1\56"+
    "\2\0\1\56\1\0\4\56\5\3\1\0\1\3\2\u012a"+
    "\11\3\1\0\5\3\1\0\4\3\2\0\4\56\1\0"+
    "\1\56\1\0\2\3\2\0\1\3\1\0\1\56\3\0"+
    "\3\3\1\56\2\0\1\56\1\0\4\56\5\3\1\0"+
    "\14\3\1\0\4\3\1\u012b\1\0\4\3\2\0\4\56"+
    "\1\0\1\56\1\0\2\3\2\0\1\3\1\0\1\56"+
    "\3\0\3\3\1\56\2\0\1\56\1\0\4\56\5\3"+
    "\1\0\7\3\1\u012c\4\3\1\0\5\3\1\0\4\3"+
    "\2\0\4\56\1\0\1\56\45\0\2\u012d\26\0\2\3"+
    "\2\0\1\3\1\0\1\56\3\0\3\3\1\56\2\0"+
    "\1\56\1\0\4\56\5\3\1\0\10\3\2\u012e\2\3"+
    "\1\0\5\3\1\0\4\3\2\0\4\56\1\0\1\56"+
    "\1\0\2\3\2\0\1\3\1\0\1\56\3\0\3\3"+
    "\1\56\2\0\1\56\1\0\4\56\5\3\1\0\14\3"+
    "\1\0\3\3\1\u012f\1\3\1\0\4\3\2\0\4\56"+
    "\1\0\1\56\30\0\1\u0130\44\0\2\3\2\0\1\3"+
    "\1\0\1\56\3\0\3\3\1\56\2\0\1\56\1\0"+
    "\4\56\1\3\1\u0131\3\3\1\0\14\3\1\0\5\3"+
    "\1\0\4\3\2\0\4\56\1\0\1\56\1\0\2\3"+
    "\2\0\1\3\1\0\1\56\3\0\3\3\1\56\2\0"+
    "\1\56\1\0\4\56\2\3\2\u0132\1\3\1\0\14\3"+
    "\1\0\5\3\1\0\4\3\2\0\4\56\1\0\1\56"+
    "\36\0\2\u0133\35\0\2\3\2\0\1\3\1\0\1\56"+
    "\3\0\3\3\1\56\2\0\1\56\1\0\4\56\5\3"+
    "\1\0\1\3\2\u0134\11\3\1\0\5\3\1\0\4\3"+
    "\2\0\4\56\1\0\1\56\45\0\2\u0135\26\0\2\3"+
    "\2\0\1\3\1\0\1\56\3\0\3\3\1\56\2\0"+
    "\1\56\1\0\4\56\5\3\1\0\10\3\2\u0136\2\3"+
    "\1\0\5\3\1\0\4\3\2\0\4\56\1\0\1\56"+
    "\1\0\2\3\2\0\1\u0137\1\0\1\56\3\0\3\3"+
    "\1\56\2\0\1\56\1\0\4\56\5\3\1\0\14\3"+
    "\1\0\5\3\1\0\4\3\2\0\4\56\1\0\1\56";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12960];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\11\1\1\11\26\1\2\11"+
    "\1\1\1\11\1\1\1\11\1\1\1\11\6\1\1\11"+
    "\1\0\1\11\1\1\3\0\1\11\1\0\4\1\1\11"+
    "\2\0\3\11\6\1\1\0\3\1\1\11\15\1\1\0"+
    "\3\1\3\0\10\1\1\0\3\1\1\0\4\1\3\11"+
    "\1\1\1\11\3\1\1\0\2\1\1\0\1\11\2\0"+
    "\3\1\3\0\4\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\11\1\0\14\1\1\11\3\1\1\11\2\0"+
    "\6\1\1\0\2\1\1\11\3\1\1\0\3\1\2\11"+
    "\1\1\1\11\2\1\1\0\3\1\1\11\5\1\1\0"+
    "\1\1\1\11\1\1\1\0\1\1\1\0\7\1\1\0"+
    "\3\1\1\0\1\1\2\0\3\1\1\0\2\1\1\11"+
    "\3\1\1\11\1\1\1\0\3\1\2\0\1\11\4\1"+
    "\1\11\1\1\1\11\1\1\1\0\1\1\1\0\3\1"+
    "\1\11\3\1\1\0\1\1\2\0\2\1\1\11\3\1"+
    "\1\11\6\1\1\11\1\1\1\0\3\1\1\11\1\1"+
    "\1\11\1\0\4\1\1\0\2\1\1\11\3\1\1\0"+
    "\2\1\1\0\2\1\1\11\1\1\1\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[311];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 242) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { lexeme=yytext(); return ERROR;
            }
          case 90: break;
          case 2: 
            { lexeme=yytext(); return IDENTIFICADOR;
            }
          case 91: break;
          case 3: 
            { lexeme=yytext(); return LITERAL_ENTERO;
            }
          case 92: break;
          case 4: 
            { /*Ignore*/
            }
          case 93: break;
          case 5: 
            { lexeme = "-"; return OPERADOR;
            }
          case 94: break;
          case 6: 
            { lexeme = "."; return OPERADOR;
            }
          case 95: break;
          case 7: 
            { lexeme = "/"; return OPERADOR;
            }
          case 96: break;
          case 8: 
            { lexeme = "("; return OPERADOR;
            }
          case 97: break;
          case 9: 
            { lexeme = "*"; return OPERADOR;
            }
          case 98: break;
          case 10: 
            { lexeme = ")"; return OPERADOR;
            }
          case 99: break;
          case 11: 
            { lexeme = "+"; return OPERADOR;
            }
          case 100: break;
          case 12: 
            { lexeme = "]"; return OPERADOR;
            }
          case 101: break;
          case 13: 
            { lexeme = "["; return OPERADOR;
            }
          case 102: break;
          case 14: 
            { lexeme = ">"; return OPERADOR;
            }
          case 103: break;
          case 15: 
            { lexeme = "="; return OPERADOR;
            }
          case 104: break;
          case 16: 
            { lexeme = "<"; return OPERADOR;
            }
          case 105: break;
          case 17: 
            { lexeme = ";"; return OPERADOR;
            }
          case 106: break;
          case 18: 
            { lexeme = ":"; return OPERADOR;
            }
          case 107: break;
          case 19: 
            { lexeme = ","; return OPERADOR;
            }
          case 108: break;
          case 20: 
            { lexeme=yytext(); return ERROR_IDENTIFICADOR;
            }
          case 109: break;
          case 21: 
            { lexeme=yytext(); return ERROR_INT;
            }
          case 110: break;
          case 22: 
            { lexeme=yytext(); return ERROR_FLOAT;
            }
          case 111: break;
          case 23: 
            { lexeme = "--"; return OPERADOR;
            }
          case 112: break;
          case 24: 
            { lexeme = "-="; return OPERADOR;
            }
          case 113: break;
          case 25: 
            { lexeme=yytext(); return LITERAL_STRING;
            }
          case 114: break;
          case 26: 
            { lexeme = "/="; return OPERADOR;
            }
          case 115: break;
          case 27: 
            { lexeme = "*="; return OPERADOR;
            }
          case 116: break;
          case 28: 
            { lexeme = "++"; return OPERADOR;
            }
          case 117: break;
          case 29: 
            { lexeme = "+="; return OPERADOR;
            }
          case 118: break;
          case 30: 
            { lexeme=yytext(); return LITERAL_CHAR;
            }
          case 119: break;
          case 31: 
            { lexeme = "OR"; return OPERADOR;
            }
          case 120: break;
          case 32: 
            { lexeme = "OF"; return PALABRAS_RESERVADAS;
            }
          case 121: break;
          case 33: 
            { lexeme = "IN"; return PALABRAS_RESERVADAS;
            }
          case 122: break;
          case 34: 
            { lexeme = "IF"; return PALABRAS_RESERVADAS;
            }
          case 123: break;
          case 35: 
            { lexeme = "TO"; return PALABRAS_RESERVADAS;
            }
          case 124: break;
          case 36: 
            { lexeme = "DO"; return PALABRAS_RESERVADAS;
            }
          case 125: break;
          case 37: 
            { lexeme = ">>"; return OPERADOR;
            }
          case 126: break;
          case 38: 
            { lexeme = ">="; return OPERADOR;
            }
          case 127: break;
          case 39: 
            { lexeme = "<>"; return OPERADOR;
            }
          case 128: break;
          case 40: 
            { lexeme = "<="; return OPERADOR;
            }
          case 129: break;
          case 41: 
            { lexeme = "<<"; return OPERADOR;
            }
          case 130: break;
          case 42: 
            { lexeme = ":="; return OPERADOR;
            }
          case 131: break;
          case 43: 
            { lexeme=yytext(); return LITERAL_FLOTANTE;
            }
          case 132: break;
          case 44: 
            { lexeme = "END"; return PALABRAS_RESERVADAS;
            }
          case 133: break;
          case 45: 
            { lexeme = "XOR"; return OPERADOR;
            }
          case 134: break;
          case 46: 
            { lexeme = "INT"; return PALABRAS_RESERVADAS;
            }
          case 135: break;
          case 47: 
            { lexeme = "VAR"; return PALABRAS_RESERVADAS;
            }
          case 136: break;
          case 48: 
            { lexeme = "AND"; return OPERADOR;
            }
          case 137: break;
          case 49: 
            { lexeme = "NOT"; return OPERADOR;
            }
          case 138: break;
          case 50: 
            { lexeme = "NIL"; return PALABRAS_RESERVADAS;
            }
          case 139: break;
          case 51: 
            { lexeme = "SET"; return PALABRAS_RESERVADAS;
            }
          case 140: break;
          case 52: 
            { lexeme = "DIV"; return OPERADOR;
            }
          case 141: break;
          case 53: 
            { lexeme = "MOD"; return OPERADOR;
            }
          case 142: break;
          case 54: 
            { lexeme = "FOR"; return PALABRAS_RESERVADAS;
            }
          case 143: break;
          case 55: 
            { lexeme = ">>="; return OPERADOR;
            }
          case 144: break;
          case 56: 
            { lexeme = "<<="; return OPERADOR;
            }
          case 145: break;
          case 57: 
            { lexeme = "ELSE"; return PALABRAS_RESERVADAS;
            }
          case 146: break;
          case 58: 
            { lexeme = "BYTE"; return PALABRAS_RESERVADAS;
            }
          case 147: break;
          case 59: 
            { lexeme = "REAL"; return PALABRAS_RESERVADAS;
            }
          case 148: break;
          case 60: 
            { lexeme = "READ"; return PALABRAS_RESERVADAS;
            }
          case 149: break;
          case 61: 
            { lexeme = "WITH"; return PALABRAS_RESERVADAS;
            }
          case 150: break;
          case 62: 
            { lexeme = "TRUE"; return PALABRAS_RESERVADAS;
            }
          case 151: break;
          case 63: 
            { lexeme = "THEN"; return PALABRAS_RESERVADAS;
            }
          case 152: break;
          case 64: 
            { lexeme = "TYPE"; return PALABRAS_RESERVADAS;
            }
          case 153: break;
          case 65: 
            { lexeme = "GOTO"; return PALABRAS_RESERVADAS;
            }
          case 154: break;
          case 66: 
            { lexeme = "CHAR"; return PALABRAS_RESERVADAS;
            }
          case 155: break;
          case 67: 
            { lexeme = "CASE"; return PALABRAS_RESERVADAS;
            }
          case 156: break;
          case 68: 
            { lexeme = "FILE"; return PALABRAS_RESERVADAS;
            }
          case 157: break;
          case 69: 
            { lexeme = "BEGIN"; return PALABRAS_RESERVADAS;
            }
          case 158: break;
          case 70: 
            { lexeme = "WRITE"; return PALABRAS_RESERVADAS;
            }
          case 159: break;
          case 71: 
            { lexeme = "WHILE"; return PALABRAS_RESERVADAS;
            }
          case 160: break;
          case 72: 
            { lexeme = "LABEL"; return PALABRAS_RESERVADAS;
            }
          case 161: break;
          case 73: 
            { lexeme = "ARRAY"; return PALABRAS_RESERVADAS;
            }
          case 162: break;
          case 74: 
            { lexeme = "UNTIL"; return PALABRAS_RESERVADAS;
            }
          case 163: break;
          case 75: 
            { lexeme = "CONST"; return PALABRAS_RESERVADAS;
            }
          case 164: break;
          case 76: 
            { lexeme = "FALSE"; return PALABRAS_RESERVADAS;
            }
          case 165: break;
          case 77: 
            { lexeme = "REPEAT"; return PALABRAS_RESERVADAS;
            }
          case 166: break;
          case 78: 
            { lexeme = "RECORD"; return PALABRAS_RESERVADAS;
            }
          case 167: break;
          case 79: 
            { lexeme = "INLINE"; return PALABRAS_RESERVADAS;
            }
          case 168: break;
          case 80: 
            { lexeme = "PACKED"; return PALABRAS_RESERVADAS;
            }
          case 169: break;
          case 81: 
            { lexeme = "STRING"; return PALABRAS_RESERVADAS;
            }
          case 170: break;
          case 82: 
            { lexeme = "DOWNTO"; return PALABRAS_RESERVADAS;
            }
          case 171: break;
          case 83: 
            { lexeme = "BOOLEAN"; return PALABRAS_RESERVADAS;
            }
          case 172: break;
          case 84: 
            { lexeme = "LONGINT"; return PALABRAS_RESERVADAS;
            }
          case 173: break;
          case 85: 
            { lexeme = "PROGRAM"; return PALABRAS_RESERVADAS;
            }
          case 174: break;
          case 86: 
            { lexeme = "FORWARD"; return PALABRAS_RESERVADAS;
            }
          case 175: break;
          case 87: 
            { lexeme = "SHORTINT"; return PALABRAS_RESERVADAS;
            }
          case 176: break;
          case 88: 
            { lexeme = "FUNCTION"; return PALABRAS_RESERVADAS;
            }
          case 177: break;
          case 89: 
            { lexeme = "PROCEDURE"; return PALABRAS_RESERVADAS;
            }
          case 178: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

    public int getYyline() {
        return yyline;
    }


}
