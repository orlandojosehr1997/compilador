/* The following code was generated by JFlex 1.6.1 */

package scannercompi;
import static scannercompi.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/Users/orlandojose/NetBeansProjects/ScannerCompi/src/scannercompi/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\4\1\17\1\17\1\4\22\0\1\3\1\0\1\11"+
    "\1\23\3\0\1\10\1\20\1\22\1\21\1\6\1\71\1\24\1\7"+
    "\1\16\4\15\4\14\2\2\1\70\1\67\1\66\1\65\1\64\2\0"+
    "\1\41\1\61\1\52\1\53\1\5\1\57\1\51\1\36\1\33\1\1"+
    "\1\56\1\37\1\54\1\43\1\26\1\46\1\1\1\27\1\50\1\34"+
    "\1\42\1\40\1\31\1\25\1\45\1\1\1\63\1\12\1\62\1\0"+
    "\1\1\1\0\1\41\1\13\1\52\1\53\1\5\1\60\1\51\1\36"+
    "\1\33\1\1\1\56\1\37\1\54\1\44\1\26\1\46\1\1\1\30"+
    "\1\50\1\35\1\42\1\40\1\31\1\25\1\45\1\1\12\0\1\17"+
    "\252\0\2\32\115\0\1\47\u1ea8\0\1\17\1\17\u0100\0\1\55\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\2\1\5\1\6"+
    "\2\1\1\2\1\7\1\10\1\11\1\12\1\1\1\13"+
    "\4\2\1\1\10\2\1\1\6\2\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\1\2\2\1\3"+
    "\1\24\1\0\1\25\1\1\3\0\1\26\1\0\3\2"+
    "\1\4\1\27\2\0\1\30\1\31\1\32\1\33\1\2"+
    "\1\34\1\35\2\2\1\0\2\2\1\36\1\37\1\36"+
    "\1\37\1\40\12\2\1\0\3\2\3\0\7\2\1\41"+
    "\1\0\3\2\1\0\3\2\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\0\1\2\1\51\1\0\1\31"+
    "\2\0\3\2\3\0\1\52\3\2\1\0\1\2\1\0"+
    "\1\2\1\0\1\2\1\53\1\0\1\53\6\2\1\54"+
    "\1\2\1\55\1\2\1\56\2\57\2\2\1\60\2\0"+
    "\1\60\5\2\1\0\2\2\2\61\1\62\1\63\1\0"+
    "\3\2\1\64\1\65\1\0\2\66\1\0\2\2\1\67"+
    "\1\4\1\3\1\70\1\71\2\2\1\0\1\2\2\72"+
    "\1\0\1\2\1\0\1\2\1\73\1\74\1\75\3\2"+
    "\1\0\3\2\1\0\1\2\2\0\2\2\1\76\1\0"+
    "\1\2\1\77\2\100\2\2\2\101\1\0\2\2\1\50"+
    "\1\0\2\102\3\2\2\103\2\104\1\0\1\2\1\0"+
    "\1\2\1\105\1\106\2\107\2\2\1\0\1\2\2\0"+
    "\2\2\2\110\2\2\2\111\2\2\1\112\1\113\2\114"+
    "\1\0\3\2\2\115\1\116\1\0\1\116\1\2\1\117"+
    "\1\2\1\0\1\2\1\120\2\121\1\122\1\2\1\0"+
    "\1\2\1\123\1\0\2\2\2\124\2\125\1\126";

  private static int [] zzUnpackAction() {
    int [] result = new int[304];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\72\0\350\0\u0122\0\u015c"+
    "\0\u0196\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\72\0\u02f2"+
    "\0\u032c\0\u0366\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2"+
    "\0\u04fc\0\u0536\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u0658\0\u0692"+
    "\0\u06cc\0\u0706\0\u0740\0\u077a\0\u07b4\0\72\0\72\0\u07ee"+
    "\0\72\0\u0828\0\72\0\u0862\0\72\0\u089c\0\u08d6\0\u0910"+
    "\0\u094a\0\72\0\u0984\0\72\0\u015c\0\u09be\0\u09f8\0\u01d0"+
    "\0\72\0\u0a32\0\u0a6c\0\u0aa6\0\u0ae0\0\u0b1a\0\72\0\u0b54"+
    "\0\u0b8e\0\72\0\u02f2\0\72\0\72\0\u0bc8\0\164\0\164"+
    "\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0\0\u0cea\0\u0d24\0\72\0\u0d5e"+
    "\0\164\0\164\0\u0d98\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80\0\u0eba"+
    "\0\u0ef4\0\u0f2e\0\u0f68\0\u0fa2\0\u0fdc\0\u1016\0\u1050\0\u108a"+
    "\0\u10c4\0\u10fe\0\u1138\0\u1172\0\u11ac\0\u11e6\0\u1220\0\u125a"+
    "\0\u1294\0\u12ce\0\u1308\0\u1342\0\u137c\0\u13b6\0\u13f0\0\u142a"+
    "\0\u1464\0\u149e\0\u14d8\0\u1512\0\72\0\72\0\72\0\u154c"+
    "\0\72\0\u1586\0\u15c0\0\u15fa\0\164\0\u089c\0\72\0\u1634"+
    "\0\u166e\0\u16a8\0\u16e2\0\u171c\0\u1756\0\u1790\0\u17ca\0\164"+
    "\0\u1804\0\u183e\0\u1878\0\u18b2\0\u18ec\0\u1926\0\u1960\0\u199a"+
    "\0\u19d4\0\72\0\u1a0e\0\164\0\u1a48\0\u1a82\0\u1abc\0\u1af6"+
    "\0\u1b30\0\u1b6a\0\164\0\u1ba4\0\164\0\u1bde\0\164\0\72"+
    "\0\164\0\u1c18\0\u1c52\0\72\0\u1c8c\0\u1cc6\0\164\0\u1d00"+
    "\0\u1d3a\0\u1d74\0\u1dae\0\u1de8\0\u1e22\0\u1e5c\0\u1e96\0\72"+
    "\0\164\0\164\0\u1ed0\0\u1f0a\0\u1f44\0\u1f7e\0\u1fb8\0\72"+
    "\0\72\0\u1ff2\0\72\0\164\0\u202c\0\u2066\0\u20a0\0\164"+
    "\0\u0b54\0\72\0\164\0\164\0\u20da\0\u2114\0\u214e\0\u2188"+
    "\0\72\0\164\0\u21c2\0\u21fc\0\u2236\0\u2270\0\164\0\164"+
    "\0\164\0\u22aa\0\u22e4\0\u231e\0\u2358\0\u2392\0\u23cc\0\u2406"+
    "\0\u2440\0\u247a\0\u24b4\0\u24ee\0\u2528\0\u2562\0\164\0\u259c"+
    "\0\u25d6\0\164\0\72\0\164\0\u2610\0\u264a\0\72\0\164"+
    "\0\u2684\0\u26be\0\u26f8\0\u2732\0\u2732\0\72\0\164\0\u276c"+
    "\0\u27a6\0\u27e0\0\72\0\164\0\72\0\164\0\u281a\0\u2854"+
    "\0\u288e\0\u28c8\0\164\0\164\0\72\0\164\0\u2902\0\u293c"+
    "\0\u2976\0\u29b0\0\u29ea\0\u2a24\0\u2a5e\0\u2a98\0\72\0\164"+
    "\0\u2ad2\0\u2b0c\0\72\0\164\0\u2b46\0\u2b80\0\164\0\164"+
    "\0\72\0\164\0\u2bba\0\u2bf4\0\u2c2e\0\u2c68\0\72\0\164"+
    "\0\72\0\u2ca2\0\164\0\u2cdc\0\164\0\u2d16\0\u2d50\0\u2d8a"+
    "\0\164\0\72\0\164\0\164\0\u2dc4\0\u2dfe\0\u2e38\0\164"+
    "\0\u2e72\0\u2eac\0\u2ee6\0\72\0\164\0\72\0\164\0\164";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[304];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\2\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\2\1\13\2\4\1\14\1\0\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\2\24\1\25\1\26"+
    "\1\27\2\30\1\3\1\31\1\32\1\33\1\34\2\35"+
    "\1\3\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\2\1\3\2\45\1\13\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\73\0\2\3\2\0\1\3"+
    "\5\0\3\3\7\0\5\3\1\0\14\3\1\0\5\3"+
    "\1\0\4\3\12\0\1\4\4\0\1\56\4\0\2\4"+
    "\55\0\2\3\2\0\1\3\5\0\3\3\7\0\5\3"+
    "\1\0\4\3\1\57\3\3\2\60\2\3\1\0\5\3"+
    "\1\0\4\3\12\0\1\61\3\0\1\62\5\0\2\61"+
    "\2\0\1\63\44\0\1\64\6\0\1\65\11\0\2\65"+
    "\54\0\4\66\1\0\3\66\1\0\1\66\1\67\57\66"+
    "\11\70\1\71\1\72\57\70\1\0\2\3\2\0\1\73"+
    "\5\0\3\3\7\0\1\3\1\74\3\3\1\0\12\3"+
    "\1\75\1\3\1\0\5\3\1\0\4\3\26\0\1\76"+
    "\46\0\1\77\25\0\1\100\2\0\1\101\132\0\1\102"+
    "\6\0\1\103\11\0\2\103\56\0\1\61\11\0\2\61"+
    "\2\0\1\63\3\0\1\104\40\0\1\105\5\0\2\3"+
    "\2\0\1\3\5\0\3\3\7\0\1\3\1\106\3\3"+
    "\1\0\14\3\1\0\5\3\1\0\4\3\11\0\2\3"+
    "\2\0\1\3\5\0\3\3\7\0\2\3\2\107\1\3"+
    "\1\0\14\3\1\0\5\3\1\0\1\3\2\110\1\3"+
    "\11\0\2\3\2\0\1\111\5\0\3\3\7\0\5\3"+
    "\1\0\14\3\1\0\5\3\1\0\4\3\11\0\2\3"+
    "\2\0\1\3\5\0\3\3\7\0\2\3\2\112\1\3"+
    "\1\113\1\114\2\3\1\115\10\3\1\0\5\3\1\0"+
    "\4\3\53\0\2\116\12\0\2\117\12\0\2\3\2\0"+
    "\1\3\5\0\3\3\7\0\5\3\1\0\10\3\2\120"+
    "\2\3\1\0\5\3\1\0\1\3\2\121\1\3\11\0"+
    "\2\3\2\0\1\3\5\0\3\3\7\0\1\3\1\122"+
    "\2\123\1\3\1\0\3\3\1\124\6\3\1\125\1\3"+
    "\1\0\5\3\1\0\4\3\11\0\2\3\2\0\1\3"+
    "\5\0\3\3\7\0\1\3\1\126\3\3\1\0\6\3"+
    "\1\127\5\3\1\0\5\3\1\0\4\3\11\0\2\3"+
    "\2\0\1\3\5\0\3\3\7\0\5\3\1\0\6\3"+
    "\1\130\5\3\1\0\5\3\1\0\4\3\11\0\2\3"+
    "\2\0\1\3\5\0\3\3\7\0\2\3\2\131\1\3"+
    "\1\0\10\3\2\132\2\3\1\0\5\3\1\0\4\3"+
    "\11\0\2\3\2\0\1\3\5\0\3\3\7\0\5\3"+
    "\1\0\10\3\2\133\2\3\1\0\5\3\1\0\4\3"+
    "\11\0\2\3\2\0\1\3\5\0\3\3\7\0\1\3"+
    "\1\134\3\3\1\135\1\136\13\3\1\0\5\3\1\0"+
    "\4\3\11\0\2\3\2\0\1\3\5\0\3\3\7\0"+
    "\2\3\2\137\1\3\1\0\6\3\1\140\5\3\1\0"+
    "\5\3\1\0\4\3\15\0\1\141\26\0\2\142\1\143"+
    "\34\0\2\3\2\0\1\144\5\0\3\3\7\0\5\3"+
    "\1\0\1\3\2\145\1\146\10\3\1\0\5\3\1\0"+
    "\4\3\11\0\2\3\2\0\1\3\5\0\3\3\7\0"+
    "\1\3\1\147\3\3\1\0\14\3\1\0\5\3\1\0"+
    "\4\3\11\0\2\3\2\0\1\3\5\0\3\3\7\0"+
    "\1\3\1\150\3\3\1\0\3\3\1\151\2\3\1\152"+
    "\5\3\1\0\5\3\1\0\4\3\11\0\2\3\2\0"+
    "\1\3\5\0\3\3\7\0\1\3\1\153\3\3\1\154"+
    "\1\155\13\3\1\0\5\3\1\0\4\3\11\0\2\3"+
    "\2\0\1\3\5\0\3\3\7\0\1\3\1\156\3\3"+
    "\1\0\14\3\1\0\5\3\1\0\4\3\11\0\2\3"+
    "\2\0\1\3\5\0\3\3\7\0\1\3\1\157\3\3"+
    "\1\160\1\161\5\3\1\162\1\163\4\3\1\0\5\3"+
    "\1\0\4\3\74\0\1\164\1\165\70\0\1\166\1\167"+
    "\1\170\70\0\1\171\6\0\1\172\11\0\2\172\55\0"+
    "\2\3\2\0\1\3\5\0\3\3\7\0\5\3\1\0"+
    "\14\3\1\173\1\174\4\3\1\0\4\3\11\0\2\3"+
    "\2\0\1\3\5\0\3\3\7\0\5\3\1\0\14\3"+
    "\1\0\3\3\1\175\1\3\1\0\4\3\12\0\1\61"+
    "\4\0\1\176\4\0\2\61\100\0\1\101\55\0\1\177"+
    "\71\0\4\66\1\200\1\201\12\0\1\66\4\0\1\66"+
    "\6\0\1\66\13\0\1\66\21\0\6\70\12\0\1\70"+
    "\4\0\1\70\6\0\1\70\13\0\1\70\12\0\2\3"+
    "\2\0\1\3\5\0\3\3\7\0\5\3\1\0\14\3"+
    "\1\0\1\3\1\202\3\3\1\0\4\3\11\0\2\3"+
    "\2\0\1\3\5\0\3\3\7\0\1\3\1\203\3\3"+
    "\1\0\14\3\1\0\5\3\1\0\4\3\11\0\2\3"+
    "\2\0\1\3\5\0\3\3\7\0\5\3\1\0\1\3"+
    "\2\204\11\3\1\0\5\3\1\0\4\3\10\0\4\76"+
    "\1\0\12\76\1\0\52\76\11\100\1\0\1\205\6\100"+
    "\1\206\50\100\2\0\1\207\11\0\2\207\55\0\2\3"+
    "\2\0\1\3\5\0\3\3\7\0\2\3\2\210\1\3"+
    "\1\0\14\3\1\0\5\3\1\0\4\3\11\0\2\3"+
    "\2\0\1\3\5\0\3\3\7\0\5\3\1\0\6\3"+
    "\1\211\4\3\1\212\1\0\2\3\1\213\2\3\1\0"+
    "\4\3\11\0\2\3\2\0\1\3\5\0\3\3\7\0"+
    "\5\3\1\214\1\215\13\3\1\0\5\3\1\0\4\3"+
    "\44\0\2\216\35\0\2\3\2\0\1\3\5\0\3\3"+
    "\7\0\5\3\1\0\1\3\2\217\11\3\1\0\5\3"+
    "\1\0\4\3\11\0\2\3\2\0\1\3\5\0\3\3"+
    "\7\0\5\3\1\220\1\221\13\3\1\0\5\3\1\0"+
    "\4\3\44\0\2\222\1\0\1\223\33\0\2\3\2\0"+
    "\1\3\5\0\3\3\7\0\5\3\1\0\1\3\2\224"+
    "\1\3\1\225\7\3\1\0\5\3\1\0\4\3\11\0"+
    "\2\3\2\0\1\3\5\0\3\3\7\0\5\3\1\0"+
    "\7\3\1\226\4\3\1\0\5\3\1\0\4\3\11\0"+
    "\2\3\2\0\1\227\5\0\3\3\7\0\5\3\1\0"+
    "\14\3\1\0\5\3\1\0\4\3\11\0\2\3\2\0"+
    "\1\3\5\0\3\3\7\0\5\3\1\0\13\3\1\230"+
    "\1\0\5\3\1\0\4\3\11\0\2\3\2\0\1\3"+
    "\5\0\3\3\7\0\5\3\1\0\10\3\2\231\2\3"+
    "\1\0\5\3\1\0\4\3\11\0\2\3\2\0\1\3"+
    "\5\0\1\232\2\3\7\0\5\3\1\0\14\3\1\0"+
    "\5\3\1\0\3\3\1\232\11\0\2\3\2\0\1\3"+
    "\5\0\3\3\7\0\2\3\2\233\1\3\1\0\14\3"+
    "\1\0\5\3\1\0\4\3\11\0\2\3\2\0\1\3"+
    "\5\0\3\3\7\0\2\3\2\234\1\3\1\0\14\3"+
    "\1\0\5\3\1\0\4\3\11\0\2\3\2\0\1\3"+
    "\5\0\3\3\7\0\5\3\1\0\14\3\1\0\3\3"+
    "\1\235\1\3\1\0\4\3\11\0\2\3\2\0\1\3"+
    "\5\0\3\3\7\0\5\3\1\0\1\3\2\236\11\3"+
    "\1\0\5\3\1\0\4\3\11\0\2\3\2\0\1\3"+
    "\5\0\3\3\7\0\5\3\1\0\1\3\2\237\11\3"+
    "\1\0\5\3\1\0\4\3\47\0\1\240\33\0\2\3"+
    "\2\0\1\3\5\0\3\3\7\0\5\3\1\0\4\3"+
    "\1\241\7\3\1\0\5\3\1\0\4\3\11\0\2\3"+
    "\2\0\1\3\5\0\3\3\7\0\1\3\1\242\3\3"+
    "\1\0\14\3\1\0\5\3\1\0\4\3\11\0\2\3"+
    "\2\0\1\3\5\0\3\3\7\0\5\3\1\0\14\3"+
    "\1\0\2\3\1\243\2\3\1\0\4\3\44\0\2\244"+
    "\63\0\2\245\67\0\1\246\44\0\2\3\2\0\1\3"+
    "\5\0\3\3\7\0\5\3\1\0\1\3\2\247\11\3"+
    "\1\0\5\3\1\0\4\3\11\0\2\3\2\0\1\3"+
    "\5\0\3\3\7\0\2\3\2\250\1\3\1\0\14\3"+
    "\1\0\5\3\1\0\4\3\11\0\2\3\2\0\1\3"+
    "\5\0\3\3\7\0\1\3\1\251\3\3\1\0\14\3"+
    "\1\0\5\3\1\0\4\3\11\0\2\3\2\0\1\3"+
    "\5\0\3\3\7\0\5\3\1\0\1\3\2\252\11\3"+
    "\1\0\5\3\1\0\4\3\11\0\2\3\2\0\1\3"+
    "\5\0\3\3\7\0\5\3\1\0\10\3\2\253\2\3"+
    "\1\0\5\3\1\0\4\3\11\0\2\3\2\0\1\3"+
    "\5\0\3\3\7\0\5\3\1\0\6\3\1\254\5\3"+
    "\1\0\5\3\1\0\4\3\11\0\2\3\2\0\1\3"+
    "\5\0\3\3\7\0\5\3\1\0\14\3\1\255\1\256"+
    "\4\3\1\0\4\3\11\0\2\3\2\0\1\3\5\0"+
    "\3\3\7\0\4\3\1\257\1\0\14\3\1\0\5\3"+
    "\1\0\4\3\50\0\1\260\32\0\2\3\2\0\1\3"+
    "\5\0\3\3\7\0\5\3\1\0\5\3\1\261\6\3"+
    "\1\0\5\3\1\0\4\3\11\0\2\3\2\0\1\3"+
    "\5\0\3\3\7\0\5\3\1\0\14\3\1\0\3\3"+
    "\1\262\1\3\1\0\4\3\11\0\2\3\2\0\1\3"+
    "\5\0\3\3\7\0\2\3\2\263\1\3\1\0\14\3"+
    "\1\0\5\3\1\0\4\3\47\0\1\264\33\0\2\3"+
    "\2\0\1\3\5\0\3\3\7\0\5\3\1\0\4\3"+
    "\1\265\7\3\1\0\5\3\1\0\4\3\11\0\2\3"+
    "\2\0\1\3\5\0\3\3\7\0\5\3\1\0\4\3"+
    "\1\266\7\3\1\0\5\3\1\0\4\3\11\0\2\3"+
    "\2\0\1\3\5\0\3\3\7\0\5\3\1\0\10\3"+
    "\2\267\2\3\1\0\5\3\1\0\4\3\75\0\1\270"+
    "\71\0\1\271\6\0\1\172\2\0\1\272\6\0\2\172"+
    "\61\0\1\273\65\0\2\3\2\0\1\274\5\0\3\3"+
    "\7\0\5\3\1\0\14\3\1\0\5\3\1\0\4\3"+
    "\20\0\1\177\3\0\2\66\64\0\1\177\3\0\2\200"+
    "\55\0\2\3\2\0\1\3\5\0\3\3\7\0\5\3"+
    "\1\275\1\276\13\3\1\0\5\3\1\0\4\3\11\0"+
    "\2\3\2\0\1\3\5\0\3\3\7\0\5\3\1\0"+
    "\4\3\1\277\7\3\1\0\5\3\1\0\4\3\11\0"+
    "\2\3\2\0\1\300\5\0\3\3\7\0\5\3\1\0"+
    "\14\3\1\0\5\3\1\0\4\3\20\0\6\100\12\0"+
    "\1\100\4\0\1\100\6\0\1\100\13\0\1\100\11\0"+
    "\11\100\1\0\1\205\6\100\1\206\1\301\47\100\2\0"+
    "\1\207\11\0\2\207\4\0\1\302\50\0\2\3\2\0"+
    "\1\3\5\0\3\3\7\0\5\3\1\0\4\3\1\303"+
    "\7\3\1\0\3\3\1\304\1\3\1\0\4\3\11\0"+
    "\2\3\2\0\1\305\5\0\3\3\7\0\5\3\1\0"+
    "\14\3\1\0\5\3\1\0\4\3\11\0\2\3\2\0"+
    "\1\3\5\0\3\3\7\0\1\3\1\306\3\3\1\0"+
    "\14\3\1\0\5\3\1\0\4\3\44\0\2\307\35\0"+
    "\2\3\2\0\1\3\5\0\3\3\7\0\5\3\1\0"+
    "\1\3\2\310\11\3\1\0\5\3\1\0\4\3\46\0"+
    "\1\311\34\0\2\3\2\0\1\3\5\0\3\3\7\0"+
    "\5\3\1\0\3\3\1\312\10\3\1\0\5\3\1\0"+
    "\4\3\47\0\1\313\33\0\2\3\2\0\1\3\5\0"+
    "\3\3\7\0\5\3\1\0\4\3\1\314\7\3\1\0"+
    "\5\3\1\0\4\3\42\0\2\315\37\0\2\3\2\0"+
    "\1\3\5\0\3\3\7\0\5\3\1\315\1\316\13\3"+
    "\1\0\5\3\1\0\4\3\11\0\2\3\2\0\1\317"+
    "\5\0\3\3\7\0\5\3\1\0\14\3\1\0\5\3"+
    "\1\0\4\3\11\0\2\3\2\0\1\3\5\0\3\3"+
    "\7\0\5\3\1\0\10\3\2\320\2\3\1\0\5\3"+
    "\1\0\4\3\11\0\2\3\2\0\1\321\5\0\3\3"+
    "\7\0\5\3\1\0\14\3\1\0\5\3\1\0\4\3"+
    "\11\0\2\3\2\0\1\3\5\0\3\3\7\0\5\3"+
    "\1\0\14\3\1\0\1\3\1\322\3\3\1\0\4\3"+
    "\11\0\2\3\2\0\1\323\5\0\3\3\7\0\5\3"+
    "\1\0\14\3\1\0\5\3\1\0\4\3\11\0\2\3"+
    "\2\0\1\3\5\0\3\3\7\0\5\3\1\0\6\3"+
    "\1\324\5\3\1\0\5\3\1\0\4\3\11\0\2\3"+
    "\2\0\1\3\5\0\3\3\7\0\5\3\1\325\1\326"+
    "\13\3\1\0\5\3\1\0\4\3\11\0\2\3\2\0"+
    "\1\3\5\0\3\3\7\0\5\3\1\0\14\3\1\0"+
    "\1\3\1\327\1\330\2\3\1\0\4\3\11\0\2\3"+
    "\2\0\1\3\5\0\3\3\7\0\5\3\1\0\14\3"+
    "\1\0\5\3\1\331\1\332\3\3\42\0\2\333\65\0"+
    "\2\334\42\0\2\3\2\0\1\3\5\0\3\3\7\0"+
    "\5\3\1\333\1\335\13\3\1\0\5\3\1\0\4\3"+
    "\11\0\2\3\2\0\1\3\5\0\3\3\7\0\2\3"+
    "\2\336\1\3\1\0\14\3\1\0\5\3\1\0\4\3"+
    "\11\0\2\3\2\0\1\3\5\0\3\3\7\0\1\3"+
    "\1\337\3\3\1\0\14\3\1\0\5\3\1\0\4\3"+
    "\11\0\2\3\2\0\1\3\5\0\3\3\7\0\5\3"+
    "\1\0\14\3\1\340\1\341\4\3\1\0\4\3\11\0"+
    "\2\3\2\0\1\3\5\0\3\3\7\0\2\3\2\342"+
    "\1\3\1\0\14\3\1\0\5\3\1\0\4\3\15\0"+
    "\1\343\65\0\2\3\2\0\1\344\5\0\3\3\7\0"+
    "\5\3\1\0\14\3\1\0\5\3\1\0\4\3\11\0"+
    "\2\3\2\0\1\3\5\0\3\3\7\0\5\3\1\0"+
    "\10\3\2\345\2\3\1\0\5\3\1\0\4\3\11\0"+
    "\2\3\2\0\1\3\5\0\3\3\7\0\4\3\1\346"+
    "\1\0\14\3\1\0\5\3\1\0\4\3\15\0\1\347"+
    "\65\0\2\3\2\0\1\350\5\0\3\3\7\0\5\3"+
    "\1\0\14\3\1\0\5\3\1\0\4\3\11\0\2\3"+
    "\2\0\1\3\5\0\3\3\7\0\5\3\1\0\14\3"+
    "\1\351\1\352\4\3\1\0\4\3\11\0\2\3\2\0"+
    "\1\3\5\0\3\3\7\0\5\3\1\0\14\3\1\0"+
    "\2\3\1\353\2\3\1\0\4\3\12\0\1\354\3\0"+
    "\1\355\5\0\2\354\6\0\1\355\110\0\2\356\26\0"+
    "\2\3\2\0\1\3\5\0\3\3\7\0\5\3\1\0"+
    "\10\3\2\357\2\3\1\0\5\3\1\0\4\3\11\0"+
    "\2\3\2\0\1\360\5\0\3\3\7\0\5\3\1\0"+
    "\14\3\1\0\5\3\1\0\4\3\11\0\2\3\2\0"+
    "\1\3\5\0\3\3\7\0\5\3\1\0\6\3\1\361"+
    "\5\3\1\0\5\3\1\0\4\3\11\0\2\3\2\0"+
    "\1\3\5\0\3\3\7\0\2\3\2\362\1\3\1\0"+
    "\14\3\1\0\5\3\1\0\4\3\15\0\1\363\65\0"+
    "\2\3\2\0\1\364\5\0\3\3\7\0\5\3\1\0"+
    "\14\3\1\0\5\3\1\0\4\3\15\0\1\365\65\0"+
    "\2\3\2\0\1\366\5\0\3\3\7\0\5\3\1\0"+
    "\14\3\1\0\5\3\1\0\4\3\53\0\2\367\26\0"+
    "\2\3\2\0\1\3\5\0\3\3\7\0\5\3\1\0"+
    "\10\3\2\370\2\3\1\0\5\3\1\0\4\3\11\0"+
    "\2\3\2\0\1\3\5\0\3\3\7\0\5\3\1\371"+
    "\1\372\13\3\1\0\5\3\1\0\4\3\11\0\2\3"+
    "\2\0\1\3\5\0\3\3\7\0\5\3\1\0\4\3"+
    "\1\373\7\3\1\0\5\3\1\0\4\3\11\0\2\3"+
    "\2\0\1\3\5\0\3\3\7\0\5\3\1\0\12\3"+
    "\1\374\1\3\1\0\5\3\1\0\4\3\47\0\1\375"+
    "\33\0\2\3\2\0\1\3\5\0\3\3\7\0\5\3"+
    "\1\0\4\3\1\376\7\3\1\0\5\3\1\0\4\3"+
    "\11\0\2\3\2\0\1\3\5\0\3\3\7\0\2\3"+
    "\2\377\1\3\1\0\14\3\1\0\5\3\1\0\4\3"+
    "\11\0\2\3\2\0\1\u0100\5\0\3\3\7\0\5\3"+
    "\1\0\14\3\1\0\5\3\1\0\4\3\15\0\1\u0101"+
    "\65\0\2\3\2\0\1\u0102\5\0\3\3\7\0\5\3"+
    "\1\0\14\3\1\0\5\3\1\0\4\3\53\0\2\u0103"+
    "\61\0\2\u0104\35\0\2\3\2\0\1\3\5\0\3\3"+
    "\7\0\5\3\1\0\10\3\2\u0105\2\3\1\0\5\3"+
    "\1\0\4\3\11\0\2\3\2\0\1\3\5\0\3\3"+
    "\7\0\5\3\1\0\1\3\2\u0106\11\3\1\0\5\3"+
    "\1\0\4\3\44\0\2\u0107\35\0\2\3\2\0\1\3"+
    "\5\0\3\3\7\0\5\3\1\0\1\3\2\u0108\11\3"+
    "\1\0\5\3\1\0\4\3\11\0\2\3\2\0\1\3"+
    "\5\0\3\3\7\0\5\3\1\0\1\3\2\u0109\11\3"+
    "\1\0\5\3\1\0\4\3\11\0\2\3\2\0\1\3"+
    "\5\0\3\3\7\0\5\3\1\0\6\3\1\u010a\5\3"+
    "\1\0\5\3\1\0\4\3\15\0\1\u010b\65\0\2\3"+
    "\2\0\1\u010c\5\0\3\3\7\0\5\3\1\0\14\3"+
    "\1\0\5\3\1\0\4\3\11\0\2\3\2\0\1\3"+
    "\5\0\3\3\7\0\5\3\1\0\1\3\2\u010d\11\3"+
    "\1\0\5\3\1\0\4\3\12\0\1\354\11\0\2\354"+
    "\55\0\2\3\2\0\1\3\5\0\3\3\7\0\5\3"+
    "\1\0\6\3\1\u010e\5\3\1\0\5\3\1\0\4\3"+
    "\11\0\2\3\2\0\1\3\5\0\3\3\7\0\5\3"+
    "\1\0\1\3\2\u010f\11\3\1\0\5\3\1\0\4\3"+
    "\11\0\2\3\2\0\1\3\5\0\3\3\7\0\5\3"+
    "\1\0\14\3\1\0\3\3\1\u0110\1\3\1\0\4\3"+
    "\15\0\1\u0111\65\0\2\3\2\0\1\u0112\5\0\3\3"+
    "\7\0\5\3\1\0\14\3\1\0\5\3\1\0\4\3"+
    "\53\0\2\u0113\26\0\2\3\2\0\1\3\5\0\3\3"+
    "\7\0\5\3\1\0\10\3\2\u0114\2\3\1\0\5\3"+
    "\1\0\4\3\11\0\2\3\2\0\1\3\5\0\3\3"+
    "\7\0\5\3\1\0\6\3\1\u0115\5\3\1\0\5\3"+
    "\1\0\4\3\11\0\2\3\2\0\1\3\5\0\3\3"+
    "\7\0\5\3\1\0\14\3\1\0\3\3\1\u0116\1\3"+
    "\1\0\4\3\63\0\1\u0117\17\0\2\3\2\0\1\3"+
    "\5\0\3\3\7\0\5\3\1\0\14\3\1\0\3\3"+
    "\1\u0118\1\3\1\0\4\3\61\0\1\u0119\52\0\2\u011a"+
    "\37\0\2\3\2\0\1\3\5\0\3\3\7\0\5\3"+
    "\1\0\14\3\1\0\1\3\1\u011b\3\3\1\0\4\3"+
    "\11\0\2\3\2\0\1\3\5\0\3\3\7\0\5\3"+
    "\1\u011a\1\u011c\13\3\1\0\5\3\1\0\4\3\11\0"+
    "\2\3\2\0\1\3\5\0\3\3\7\0\1\3\1\u011d"+
    "\3\3\1\0\14\3\1\0\5\3\1\0\4\3\11\0"+
    "\2\3\2\0\1\3\5\0\3\3\7\0\2\3\2\u011e"+
    "\1\3\1\0\14\3\1\0\5\3\1\0\4\3\11\0"+
    "\2\3\2\0\1\3\5\0\3\3\7\0\5\3\1\u011f"+
    "\1\u0120\13\3\1\0\5\3\1\0\4\3\11\0\2\3"+
    "\2\0\1\3\5\0\3\3\7\0\5\3\1\0\10\3"+
    "\2\u0121\2\3\1\0\5\3\1\0\4\3\44\0\2\u0122"+
    "\35\0\2\3\2\0\1\3\5\0\3\3\7\0\5\3"+
    "\1\0\1\3\2\u0123\11\3\1\0\5\3\1\0\4\3"+
    "\11\0\2\3\2\0\1\3\5\0\3\3\7\0\5\3"+
    "\1\0\14\3\1\0\4\3\1\u0124\1\0\4\3\11\0"+
    "\2\3\2\0\1\3\5\0\3\3\7\0\5\3\1\0"+
    "\7\3\1\u0125\4\3\1\0\5\3\1\0\4\3\53\0"+
    "\2\u0126\26\0\2\3\2\0\1\3\5\0\3\3\7\0"+
    "\5\3\1\0\10\3\2\u0127\2\3\1\0\5\3\1\0"+
    "\4\3\11\0\2\3\2\0\1\3\5\0\3\3\7\0"+
    "\5\3\1\0\14\3\1\0\3\3\1\u0128\1\3\1\0"+
    "\4\3\36\0\1\u0129\44\0\2\3\2\0\1\3\5\0"+
    "\3\3\7\0\1\3\1\u012a\3\3\1\0\14\3\1\0"+
    "\5\3\1\0\4\3\11\0\2\3\2\0\1\3\5\0"+
    "\3\3\7\0\2\3\2\u012b\1\3\1\0\14\3\1\0"+
    "\5\3\1\0\4\3\44\0\2\u012c\35\0\2\3\2\0"+
    "\1\3\5\0\3\3\7\0\5\3\1\0\1\3\2\u012d"+
    "\11\3\1\0\5\3\1\0\4\3\53\0\2\u012e\26\0"+
    "\2\3\2\0\1\3\5\0\3\3\7\0\5\3\1\0"+
    "\10\3\2\u012f\2\3\1\0\5\3\1\0\4\3\11\0"+
    "\2\3\2\0\1\u0130\5\0\3\3\7\0\5\3\1\0"+
    "\14\3\1\0\5\3\1\0\4\3\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12064];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\11\1\1\11\26\1\2\11"+
    "\1\1\1\11\1\1\1\11\1\1\1\11\4\1\1\11"+
    "\1\0\1\11\1\1\3\0\1\11\1\0\4\1\1\11"+
    "\2\0\1\11\1\1\2\11\5\1\1\0\3\1\1\11"+
    "\15\1\1\0\3\1\3\0\10\1\1\0\3\1\1\0"+
    "\4\1\3\11\1\1\1\11\1\1\1\0\2\1\1\0"+
    "\1\11\2\0\3\1\3\0\4\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\11\1\0\14\1\1\11\3\1"+
    "\1\11\2\0\6\1\1\0\2\1\1\11\3\1\1\0"+
    "\3\1\2\11\1\0\1\11\1\1\1\0\4\1\1\11"+
    "\4\1\1\0\1\1\1\11\1\1\1\0\1\1\1\0"+
    "\7\1\1\0\3\1\1\0\1\1\2\0\3\1\1\0"+
    "\2\1\1\11\3\1\1\11\1\1\1\0\3\1\1\0"+
    "\1\11\4\1\1\11\1\1\1\11\1\1\1\0\1\1"+
    "\1\0\3\1\1\11\3\1\1\0\1\1\2\0\2\1"+
    "\1\11\3\1\1\11\5\1\1\11\1\1\1\0\3\1"+
    "\1\11\1\1\1\11\1\0\4\1\1\0\2\1\1\11"+
    "\3\1\1\0\2\1\1\0\2\1\1\11\1\1\1\11"+
    "\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[304];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 232) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { lexeme=yytext(); return ERROR;
            }
          case 87: break;
          case 2: 
            { lexeme=yytext(); return IDENTIFICADOR;
            }
          case 88: break;
          case 3: 
            { lexeme=yytext(); return LITERAL_ENTERO;
            }
          case 89: break;
          case 4: 
            { /*Ignore*/
            }
          case 90: break;
          case 5: 
            { lexeme = "+"; return OPERADOR;
            }
          case 91: break;
          case 6: 
            { lexeme = "."; return OPERADOR;
            }
          case 92: break;
          case 7: 
            { lexeme = "/"; return OPERADOR;
            }
          case 93: break;
          case 8: 
            { lexeme = "("; return OPERADOR;
            }
          case 94: break;
          case 9: 
            { lexeme = "*"; return OPERADOR;
            }
          case 95: break;
          case 10: 
            { lexeme = ")"; return OPERADOR;
            }
          case 96: break;
          case 11: 
            { lexeme = "-"; return OPERADOR;
            }
          case 97: break;
          case 12: 
            { lexeme = "]"; return OPERADOR;
            }
          case 98: break;
          case 13: 
            { lexeme = "["; return OPERADOR;
            }
          case 99: break;
          case 14: 
            { lexeme = ">"; return OPERADOR;
            }
          case 100: break;
          case 15: 
            { lexeme = "="; return OPERADOR;
            }
          case 101: break;
          case 16: 
            { lexeme = "<"; return OPERADOR;
            }
          case 102: break;
          case 17: 
            { lexeme = ";"; return OPERADOR;
            }
          case 103: break;
          case 18: 
            { lexeme = ":"; return OPERADOR;
            }
          case 104: break;
          case 19: 
            { lexeme = ","; return OPERADOR;
            }
          case 105: break;
          case 20: 
            { lexeme = "++"; return OPERADOR;
            }
          case 106: break;
          case 21: 
            { lexeme = "+="; return OPERADOR;
            }
          case 107: break;
          case 22: 
            { lexeme=yytext(); return LITERAL_STRING;
            }
          case 108: break;
          case 23: 
            { lexeme = "/="; return OPERADOR;
            }
          case 109: break;
          case 24: 
            { lexeme = "*="; return OPERADOR;
            }
          case 110: break;
          case 25: 
            { lexeme=yytext(); return LITERAL_CHAR;
            }
          case 111: break;
          case 26: 
            { lexeme = "--"; return OPERADOR;
            }
          case 112: break;
          case 27: 
            { lexeme = "-="; return OPERADOR;
            }
          case 113: break;
          case 28: 
            { lexeme = "OR"; return OPERADOR;
            }
          case 114: break;
          case 29: 
            { lexeme = "OF"; return PALABRAS_RESERVADAS;
            }
          case 115: break;
          case 30: 
            { lexeme = "IN"; return PALABRAS_RESERVADAS;
            }
          case 116: break;
          case 31: 
            { lexeme = "IF"; return PALABRAS_RESERVADAS;
            }
          case 117: break;
          case 32: 
            { lexeme = "TO"; return PALABRAS_RESERVADAS;
            }
          case 118: break;
          case 33: 
            { lexeme = "DO"; return PALABRAS_RESERVADAS;
            }
          case 119: break;
          case 34: 
            { lexeme = ">>"; return OPERADOR;
            }
          case 120: break;
          case 35: 
            { lexeme = ">="; return OPERADOR;
            }
          case 121: break;
          case 36: 
            { lexeme = "<>"; return OPERADOR;
            }
          case 122: break;
          case 37: 
            { lexeme = "<="; return OPERADOR;
            }
          case 123: break;
          case 38: 
            { lexeme = "<<"; return OPERADOR;
            }
          case 124: break;
          case 39: 
            { lexeme = ":="; return OPERADOR;
            }
          case 125: break;
          case 40: 
            { lexeme=yytext(); return LITERAL_FLOTANTE;
            }
          case 126: break;
          case 41: 
            { lexeme = "END"; return PALABRAS_RESERVADAS;
            }
          case 127: break;
          case 42: 
            { lexeme = "XOR"; return OPERADOR;
            }
          case 128: break;
          case 43: 
            { lexeme = "INT"; return PALABRAS_RESERVADAS;
            }
          case 129: break;
          case 44: 
            { lexeme = "VAR"; return PALABRAS_RESERVADAS;
            }
          case 130: break;
          case 45: 
            { lexeme = "AND"; return OPERADOR;
            }
          case 131: break;
          case 46: 
            { lexeme = "NOT"; return OPERADOR;
            }
          case 132: break;
          case 47: 
            { lexeme = "NIL"; return PALABRAS_RESERVADAS;
            }
          case 133: break;
          case 48: 
            { lexeme = "SET"; return PALABRAS_RESERVADAS;
            }
          case 134: break;
          case 49: 
            { lexeme = "DIV"; return OPERADOR;
            }
          case 135: break;
          case 50: 
            { lexeme = "MOD"; return OPERADOR;
            }
          case 136: break;
          case 51: 
            { lexeme = "FOR"; return PALABRAS_RESERVADAS;
            }
          case 137: break;
          case 52: 
            { lexeme = ">>="; return OPERADOR;
            }
          case 138: break;
          case 53: 
            { lexeme = "<<="; return OPERADOR;
            }
          case 139: break;
          case 54: 
            { lexeme = "ELSE"; return PALABRAS_RESERVADAS;
            }
          case 140: break;
          case 55: 
            { lexeme = "BYTE"; return PALABRAS_RESERVADAS;
            }
          case 141: break;
          case 56: 
            { lexeme = "REAL"; return PALABRAS_RESERVADAS;
            }
          case 142: break;
          case 57: 
            { lexeme = "READ"; return PALABRAS_RESERVADAS;
            }
          case 143: break;
          case 58: 
            { lexeme = "WITH"; return PALABRAS_RESERVADAS;
            }
          case 144: break;
          case 59: 
            { lexeme = "TRUE"; return PALABRAS_RESERVADAS;
            }
          case 145: break;
          case 60: 
            { lexeme = "THEN"; return PALABRAS_RESERVADAS;
            }
          case 146: break;
          case 61: 
            { lexeme = "TYPE"; return PALABRAS_RESERVADAS;
            }
          case 147: break;
          case 62: 
            { lexeme = "GOTO"; return PALABRAS_RESERVADAS;
            }
          case 148: break;
          case 63: 
            { lexeme = "CHAR"; return PALABRAS_RESERVADAS;
            }
          case 149: break;
          case 64: 
            { lexeme = "CASE"; return PALABRAS_RESERVADAS;
            }
          case 150: break;
          case 65: 
            { lexeme = "FILE"; return PALABRAS_RESERVADAS;
            }
          case 151: break;
          case 66: 
            { lexeme = "BEGIN"; return PALABRAS_RESERVADAS;
            }
          case 152: break;
          case 67: 
            { lexeme = "WRITE"; return PALABRAS_RESERVADAS;
            }
          case 153: break;
          case 68: 
            { lexeme = "WHILE"; return PALABRAS_RESERVADAS;
            }
          case 154: break;
          case 69: 
            { lexeme = "LABEL"; return PALABRAS_RESERVADAS;
            }
          case 155: break;
          case 70: 
            { lexeme = "ARRAY"; return PALABRAS_RESERVADAS;
            }
          case 156: break;
          case 71: 
            { lexeme = "UNTIL"; return PALABRAS_RESERVADAS;
            }
          case 157: break;
          case 72: 
            { lexeme = "CONST"; return PALABRAS_RESERVADAS;
            }
          case 158: break;
          case 73: 
            { lexeme = "FALSE"; return PALABRAS_RESERVADAS;
            }
          case 159: break;
          case 74: 
            { lexeme = "REPEAT"; return PALABRAS_RESERVADAS;
            }
          case 160: break;
          case 75: 
            { lexeme = "RECORD"; return PALABRAS_RESERVADAS;
            }
          case 161: break;
          case 76: 
            { lexeme = "INLINE"; return PALABRAS_RESERVADAS;
            }
          case 162: break;
          case 77: 
            { lexeme = "PACKED"; return PALABRAS_RESERVADAS;
            }
          case 163: break;
          case 78: 
            { lexeme = "STRING"; return PALABRAS_RESERVADAS;
            }
          case 164: break;
          case 79: 
            { lexeme = "DOWNTO"; return PALABRAS_RESERVADAS;
            }
          case 165: break;
          case 80: 
            { lexeme = "BOOLEAN"; return PALABRAS_RESERVADAS;
            }
          case 166: break;
          case 81: 
            { lexeme = "LONGINT"; return PALABRAS_RESERVADAS;
            }
          case 167: break;
          case 82: 
            { lexeme = "PROGRAM"; return PALABRAS_RESERVADAS;
            }
          case 168: break;
          case 83: 
            { lexeme = "FORWARD"; return PALABRAS_RESERVADAS;
            }
          case 169: break;
          case 84: 
            { lexeme = "SHORTINT"; return PALABRAS_RESERVADAS;
            }
          case 170: break;
          case 85: 
            { lexeme = "FUNCTION"; return PALABRAS_RESERVADAS;
            }
          case 171: break;
          case 86: 
            { lexeme = "PROCEDURE"; return PALABRAS_RESERVADAS;
            }
          case 172: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

    public int getYyline() 
    {
        return yyline;
    }


}
